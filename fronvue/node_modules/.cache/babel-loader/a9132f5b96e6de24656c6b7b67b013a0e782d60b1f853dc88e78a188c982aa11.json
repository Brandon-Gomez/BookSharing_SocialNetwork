{"ast":null,"code":"import apiClient from '@/services/ApiService';\nexport default {\n  data() {\n    return {\n      profileData: {\n        name: '',\n        description: '',\n        profilePicture: '',\n        blog: '',\n        location: ''\n      },\n      username: this.$route.params.username,\n      isCurrentUser: false,\n      // Aquí almacenarás si el usuario autenticado puede editar\n      publications: 0,\n      // Puedes reemplazar con datos reales más adelante\n      followers: 843,\n      // Datos de ejemplo\n      following: 1176 // Datos de ejemplo\n    };\n  },\n  async mounted() {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      try {\n        // Obtener información del perfil del usuario\n        const response = await apiClient.get(`/profile/${this.username}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // Almacena los datos del perfil y si el usuario autenticado es el mismo\n        this.profileData = response.data.user;\n        this.isCurrentUser = response.data.isCurrentUser; // Este valor viene del backend\n      } catch (error) {\n        console.error(\"Error fetching profile:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["apiClient","data","profileData","name","description","profilePicture","blog","location","username","$route","params","isCurrentUser","publications","followers","following","mounted","token","localStorage","getItem","response","get","headers","Authorization","user","error","console"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\profile_component.vue"],"sourcesContent":["<template>\r\n  <div class=\"profile-container\">\r\n    <div class=\"profile-header\">\r\n      <img \r\n        :src=\"profileData.profilePicture || 'https://via.placeholder.com/150'\" \r\n        class=\"profile-image\" \r\n        alt=\"Profile Picture\" \r\n      />\r\n      <div class=\"profile-info\">\r\n        <h1>{{ profileData.name }}</h1>\r\n        <p><strong>{{ username || 'No disponible' }}</strong></p>\r\n        <div class=\"profile-stats\">\r\n          <span>{{ publications }} publicaciones</span>\r\n          <span>{{ followers }} seguidores</span>\r\n          <span>{{ following }} seguidos</span>\r\n        </div>\r\n        <p v-if=\"profileData.description\">{{ profileData.description }}</p>\r\n        \r\n        <!-- Mostrar el botón de editar solo si el usuario autenticado es el mismo -->\r\n        <router-link \r\n          v-if=\"isCurrentUser\" \r\n          :to=\"`/profile/${username}/edit-account`\" \r\n          class=\"btn btn-primary\"\r\n        >\r\n          Editar perfil\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n    <div class=\"profile-bio\">\r\n      <p>Blog personal: <span>{{ profileData.blog || 'No disponible' }}</span></p>\r\n      <p><span class=\"location\">{{ profileData.location || 'No disponible' }}</span></p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport apiClient from '@/services/ApiService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      profileData: {\r\n        name: '',\r\n        description: '',\r\n        profilePicture: '',\r\n        blog: '',\r\n        location: ''\r\n      },\r\n      username: this.$route.params.username,\r\n      isCurrentUser: false,  // Aquí almacenarás si el usuario autenticado puede editar\r\n      publications: 0,        // Puedes reemplazar con datos reales más adelante\r\n      followers: 843,         // Datos de ejemplo\r\n      following: 1176         // Datos de ejemplo\r\n    };\r\n  },\r\n  async mounted() {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      try {\r\n        // Obtener información del perfil del usuario\r\n        const response = await apiClient.get(`/profile/${this.username}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n\r\n        // Almacena los datos del perfil y si el usuario autenticado es el mismo\r\n        this.profileData = response.data.user;\r\n        this.isCurrentUser = response.data.isCurrentUser;  // Este valor viene del backend\r\n      } catch (error) {\r\n        console.error(\"Error fetching profile:\", error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.profile-container {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.profile-header {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.profile-image {\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50%;\r\n  margin-right: 20px;\r\n}\r\n\r\n.profile-info {\r\n  flex-grow: 1;\r\n}\r\n\r\n.profile-stats {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 10px 0;\r\n}\r\n\r\n.profile-bio {\r\n  margin-top: 20px;\r\n  border-top: 1px solid #ddd;\r\n  padding-top: 10px;\r\n}\r\n\r\n.btn {\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"AAoCA,OAAOA,SAAQ,MAAO,uBAAuB;AAE7C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE;QACXC,IAAI,EAAE,EAAE;QACRC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,EAAE;QAClBC,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE;MACZ,CAAC;MACDC,QAAQ,EAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,QAAQ;MACrCG,aAAa,EAAE,KAAK;MAAG;MACvBC,YAAY,EAAE,CAAC;MAAS;MACxBC,SAAS,EAAE,GAAG;MAAU;MACxBC,SAAS,EAAE,IAAG,CAAU;IAC1B,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIF,KAAK,EAAE;MACT,IAAI;QACF;QACA,MAAMG,QAAO,GAAI,MAAMnB,SAAS,CAACoB,GAAG,CAAC,YAAY,IAAI,CAACZ,QAAQ,EAAE,EAAE;UAChEa,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,KAAK;UAChC;QACF,CAAC,CAAC;;QAEF;QACA,IAAI,CAACd,WAAU,GAAIiB,QAAQ,CAAClB,IAAI,CAACsB,IAAI;QACrC,IAAI,CAACZ,aAAY,GAAIQ,QAAQ,CAAClB,IAAI,CAACU,aAAa,EAAG;MACrD,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}