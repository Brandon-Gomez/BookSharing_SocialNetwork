{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-group my-2\"\n};\nconst _hoisted_2 = {\n  class: \"form-group my-2\"\n};\nconst _hoisted_3 = {\n  class: \"form-group\"\n};\nconst _hoisted_4 = [\"value\"];\nconst _hoisted_5 = {\n  class: \"form-group my-2\"\n};\nconst _hoisted_6 = {\n  class: \"form-group my-2\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" Content\"), _createCommentVNode(\" Toolbar\"), _cache[13] || (_cache[13] = _createElementVNode(\"h2\", {\n    class: \"h3 pt-2 pb-4 mb-0 text-center text-sm-start border-bottom mt-2\"\n  }, \" Modificar publicacion \", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[5] || (_cache[5] = _withModifiers((...args) => $options.updatePost && $options.updatePost(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_1, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    for: \"title\"\n  }, \"Título\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newPost.title = $event),\n    class: \"form-control\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newPost.title]])]), _createElementVNode(\"div\", _hoisted_2, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Descripción\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    id: \"description\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.newPost.description = $event),\n    class: \"form-control\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newPost.description]])]), _createElementVNode(\"div\", _hoisted_3, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    for: \"category\"\n  }, \"Categoría\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"category\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.newPost.category_id = $event),\n    class: \"form-control form-control-sm\"\n  }, [_cache[8] || (_cache[8] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\",\n    selected: \"\"\n  }, \"Selecciona una categoría\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.categories, category => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: category.id,\n      value: category.id\n    }, _toDisplayString(category.name), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.newPost.category_id]])]), _createElementVNode(\"div\", _hoisted_5, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    for: \"image\"\n  }, \"Imagen\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    id: \"image\",\n    onChange: _cache[3] || (_cache[3] = (...args) => _ctx.handleImageUpload && _ctx.handleImageUpload(...args)),\n    class: \"form-control\",\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */)]), _createElementVNode(\"div\", _hoisted_6, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"pdf\"\n  }, \"Archivo PDF\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    id: \"pdf\",\n    onChange: _cache[4] || (_cache[4] = (...args) => _ctx.handlePdfUpload && _ctx.handlePdfUpload(...args)),\n    class: \"form-control\",\n    accept: \"application/*\"\n  }, null, 32 /* NEED_HYDRATION */)]), _cache[12] || (_cache[12] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-primary\"\n  }, \"Guardar Cambios\", -1 /* HOISTED */)), _createCommentVNode(\" <button @click=\\\"deletePost\\\" class=\\\"btn btn-danger ml-2\\\">Eliminar Publicación</button> \")], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createCommentVNode","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","updatePost","_hoisted_1","for","type","id","$event","$data","newPost","title","_hoisted_2","description","_hoisted_3","category_id","value","disabled","selected","_Fragment","_renderList","categories","category","key","name","_hoisted_4","_hoisted_5","onChange","_ctx","handleImageUpload","accept","_hoisted_6","handlePdfUpload"],"sources":["D:\\Downloads\\BookSharing_SocialNetwork\\fronvue\\src\\components\\editpost_component.vue"],"sourcesContent":["<template>\r\n  <div>\r\n          <!-- Content-->\r\n            <!-- Toolbar-->\r\n\r\n            <h2 class=\"h3 pt-2 pb-4 mb-0 text-center text-sm-start border-bottom mt-2\">\r\n              Modificar publicacion\r\n            </h2>\r\n            <form @submit.prevent=\"updatePost\">\r\n              <div class=\"form-group my-2\">\r\n                <label for=\"title\">Título</label>\r\n                <input type=\"text\" id=\"title\" v-model=\"newPost.title\" class=\"form-control\" />\r\n              </div>\r\n\r\n              <div class=\"form-group my-2\">\r\n                <label for=\"description\">Descripción</label>\r\n                <textarea id=\"description\" v-model=\"newPost.description\" class=\"form-control\"></textarea>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label for=\"category\">Categoría</label>\r\n                <select id=\"category\" v-model=\"newPost.category_id\" class=\"form-control form-control-sm\">\r\n                  <option value=\"\" disabled selected>Selecciona una categoría</option>\r\n                  <option v-for=\"category in categories\" :key=\"category.id\" :value=\"category.id\">\r\n                    {{ category.name }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n\r\n              <div class=\"form-group my-2\">\r\n                <label for=\"image\">Imagen</label>\r\n                <input type=\"file\" id=\"image\" @change=\"handleImageUpload\" class=\"form-control\" accept=\"image/*\" />\r\n              </div>\r\n\r\n              <div class=\"form-group my-2\">\r\n                <label for=\"pdf\">Archivo PDF</label>\r\n                <input type=\"file\" id=\"pdf\" @change=\"handlePdfUpload\" class=\"form-control\" accept=\"application/*\" />\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Guardar Cambios</button>\r\n              <!-- <button @click=\"deletePost\" class=\"btn btn-danger ml-2\">Eliminar Publicación</button> -->\r\n            </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport apiClient from \"@/services/ApiService\";\r\nimport { logoutUser } from '@/services/useAuth.js';\r\n\r\nexport default {\r\n  components: {\r\n  },\r\n\r\n  props: {\r\n    postId: {\r\n      type: [String, Number],\r\n      required: true\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n\r\n      categories: [],\r\n      userData: {\r\n        id: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        username: \"\",\r\n        name: \"\",\r\n        birthdate: \"\",\r\n        gender: \"\",\r\n        description: \"\",\r\n        profile_picture: \"\",\r\n      },\r\n      isCurrentUser: true,\r\n      publications: 0,\r\n      follows: {\r\n        isFollowing: false,\r\n        followers: 0,\r\n        following: 0,\r\n      },\r\n      countPosts: 0, \r\n      profileImageFile: null,\r\n      profilePhoto: null,\r\n      newPost: {\r\n        id: \"\",\r\n        title: \"\",\r\n        description: \"\",\r\n        image: \"\",\r\n        pdf: \"\",\r\n      },\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    onPageChange(n) {\r\n      this.page = n;\r\n      this.fetchPosts();\r\n    },\r\n\r\n    async fetchUser() {\r\n      try {\r\n        const token = localStorage.getItem(\"authToken\");\r\n        const username = this.userData.username;\r\n        const response = await apiClient.get(`/profile/${username}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        let user = response.data.user;\r\n        // Formatea la fecha para el input date\r\n        if (user.birthdate) {\r\n          user.birthdate = user.birthdate.split(\"T\")[0];\r\n        }\r\n        this.userData = {\r\n          ...user,\r\n          password: \"\",\r\n        };\r\n        this.isCurrentUser = response.data.isCurrentUser;\r\n\r\n        // Obtener seguidores y seguidos\r\n        if (user.id) {\r\n          // Seguidores\r\n          const resFollowers = await apiClient.get(\r\n            `/follow/followers/count/${user.id}`,\r\n            {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            }\r\n          );\r\n          this.follows.followers = resFollowers.data.followerCount || 0;\r\n\r\n          // Seguidos\r\n          const resFollowing = await apiClient.get(\r\n            `/follow/following/count/${user.id}`,\r\n            {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            }\r\n          );\r\n          this.follows.following = resFollowing.data.followingCount || 0;\r\n\r\n          // cantidad de publicaciones\r\n          const res = await apiClient.get(`/posts/count/${user.id}`);\r\n          this.countPosts = res.data.post_count;\r\n\r\n        }\r\n      } catch (error) {\r\n        console.error(\r\n          \"Error al obtener el usuario:\",\r\n          error.response?.data || error\r\n        );\r\n      }\r\n    },\r\n\r\n    async fetchPost() {\r\n      try {\r\n        // console log prop postId\r\n        const postId = this.postId;\r\n        const token = localStorage.getItem(\"authToken\");\r\n\r\n        const response = await apiClient.get(`/posts/${postId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n        );\r\n        this.userData.id = response.data.user_id;\r\n        this.userData.username = response.data.username;\r\n        this.newPost = response.data;\r\n        // console.log(\"DATA OBTENIDA:\", response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching post:', error);\r\n      }\r\n    },\r\n    getUserImage() {\r\n      return (\r\n        this.userData.profile_picture ||\r\n        \"https://firebasestorage.googleapis.com/v0/b/booksharing-socialnetwork.appspot.com/o/profile%2Fdefault.jpg?alt=media\"\r\n      );\r\n    },\r\n    logout() {\r\n      logoutUser(this.$router);\r\n    },\r\n\r\n    async updatePost() {\r\n      const token = localStorage.getItem('authToken');\r\n      if (token) {\r\n        const formData = new FormData();\r\n\r\n        if (!this.newPost.title || !this.newPost.description) {\r\n          console.error('Title and description are required.');\r\n          return;\r\n        }\r\n\r\n        formData.append('title', this.newPost.title);\r\n        formData.append('description', this.newPost.description);\r\n        formData.append('category_id', this.newPost.category_id);\r\n        // formData.append('images', this.newPost.images);\r\n        // formData.append('pdf', this.newPost.pdf_file);\r\n\r\n        // Añadir la imagen solo si se seleccionó una nueva\r\n        if (this.newPost.image) {\r\n          formData.append('images', this.newPost.image);\r\n        }\r\n\r\n        // Añadir el PDF solo si se seleccionó uno nuevo\r\n        if (this.newPost.pdf_file) {\r\n          formData.append('pdf', this.newPost.pdf_file);\r\n        }\r\n\r\n        // Log de datos que se enviarán\r\n        for (const [key, value] of formData.entries()) {\r\n          console.log(`${key}:`, value);\r\n        }\r\n\r\n        try {\r\n          const response = await apiClient.put(`/posts/${this.postId}`, formData, {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              'Content-Type': 'multipart/form-data',\r\n            },\r\n          });\r\n          console.log(response.data);\r\n\r\n          this.$router.push(`/profile/${this.userData.username}`)\r\n        } catch (error) {\r\n          console.error('Error updating post:', error);\r\n        }\r\n      }\r\n    },\r\n\r\n    goToEditProfile() {\r\n      this.$router.push(`/profile/${this.userData.username}/edit-account`);\r\n    },\r\n\r\n    editPost(post) {\r\n      // Redirige a la vista de edición del post del usuario\r\n      this.$router.push(`/posts/${post.id}/edit-post`);\r\n    },\r\n    async deletePost(post) {\r\n      if (confirm('¿Estás seguro de que deseas eliminar esta publicación?')) {\r\n        try {\r\n          const token = localStorage.getItem('authToken');\r\n          await apiClient.delete(`/posts/${post.id}`, {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n          });\r\n          // Recarga las publicaciones después de eliminar\r\n          alert('Publicación eliminada correctamente');\r\n        } catch (error) {\r\n          alert('Error al eliminar la publicación');\r\n          console.error(error);\r\n        }\r\n      }\r\n    },\r\n    // get categories from api\r\n  async fetchCategories() {\r\n    try {\r\n      const response = await apiClient.get('/categories',\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n          },\r\n        });\r\n      this.categories = response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching categories:', error);\r\n    }\r\n  },\r\n  },\r\n  \r\n\r\n  async mounted() {\r\n    await this.fetchPost(),\r\n      await this.fetchCategories(),\r\n      this.fetchUser();\r\n\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n.library-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\r\n  gap: 2rem;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.library-item .card {\r\n  height: 100%;\r\n  max-width: 250px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.card-img-top {\r\n  height: 300px;\r\n  object-fit: cover;\r\n}\r\n</style>\r\n"],"mappings":";;EASmBA,KAAK,EAAC;AAAiB;;EAKvBA,KAAK,EAAC;AAAiB;;EAKvBA,KAAK,EAAC;AAAY;mBAnBrC;;EA6BmBA,KAAK,EAAC;AAAiB;;EAKvBA,KAAK,EAAC;AAAiB;;uBAjCxCC,mBAAA,CAwCM,cAvCEC,mBAAA,YAAe,EACbA,mBAAA,YAAe,E,4BAEfC,mBAAA,CAEK;IAFDH,KAAK,EAAC;EAAgE,GAAC,yBAE3E,sBACAG,mBAAA,CAgCO;IAhCAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MARzBC,cAAA,KAAAC,IAAA,KAQmCC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/BJ,mBAAA,CAGM,OAHNO,UAGM,G,0BAFJP,mBAAA,CAAiC;IAA1BQ,GAAG,EAAC;EAAO,GAAC,QAAM,sB,gBACzBR,mBAAA,CAA6E;IAAtES,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,OAAO;IAX7C,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAWuDC,KAAA,CAAAC,OAAO,CAACC,KAAK,GAAAH,MAAA;IAAEd,KAAK,EAAC;iDAArBe,KAAA,CAAAC,OAAO,CAACC,KAAK,E,KAGtDd,mBAAA,CAGM,OAHNe,UAGM,G,0BAFJf,mBAAA,CAA4C;IAArCQ,GAAG,EAAC;EAAa,GAAC,aAAW,sB,gBACpCR,mBAAA,CAAyF;IAA/EU,EAAE,EAAC,aAAa;IAhB1C,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAgBoDC,KAAA,CAAAC,OAAO,CAACG,WAAW,GAAAL,MAAA;IAAEd,KAAK,EAAC;iDAA3Be,KAAA,CAAAC,OAAO,CAACG,WAAW,E,KAGzDhB,mBAAA,CAQM,OARNiB,UAQM,G,0BAPJjB,mBAAA,CAAuC;IAAhCQ,GAAG,EAAC;EAAU,GAAC,WAAS,sB,gBAC/BR,mBAAA,CAKS;IALDU,EAAE,EAAC,UAAU;IArBrC,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAqB+CC,KAAA,CAAAC,OAAO,CAACK,WAAW,GAAAP,MAAA;IAAEd,KAAK,EAAC;gCACxDG,mBAAA,CAAoE;IAA5DmB,KAAK,EAAC,EAAE;IAACC,QAAQ,EAAR,EAAQ;IAACC,QAAQ,EAAR;KAAS,0BAAwB,uB,kBAC3DvB,mBAAA,CAESwB,SAAA,QAzB3BC,WAAA,CAuB6CX,KAAA,CAAAY,UAAU,EAAtBC,QAAQ;yBAAvB3B,mBAAA,CAES;MAF+B4B,GAAG,EAAED,QAAQ,CAACf,EAAE;MAAGS,KAAK,EAAEM,QAAQ,CAACf;wBACtEe,QAAQ,CAACE,IAAI,wBAxBpCC,UAAA;2EAqB+ChB,KAAA,CAAAC,OAAO,CAACK,WAAW,E,KAQpDlB,mBAAA,CAGM,OAHN6B,UAGM,G,4BAFJ7B,mBAAA,CAAiC;IAA1BQ,GAAG,EAAC;EAAO,GAAC,QAAM,sBACzBR,mBAAA,CAAkG;IAA3FS,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,OAAO;IAAEoB,QAAM,EAAA5B,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAE2B,IAAA,CAAAC,iBAAA,IAAAD,IAAA,CAAAC,iBAAA,IAAA5B,IAAA,CAAiB;IAAEP,KAAK,EAAC,cAAc;IAACoC,MAAM,EAAC;uCAGxFjC,mBAAA,CAGM,OAHNkC,UAGM,G,4BAFJlC,mBAAA,CAAoC;IAA7BQ,GAAG,EAAC;EAAK,GAAC,aAAW,sBAC5BR,mBAAA,CAAoG;IAA7FS,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,KAAK;IAAEoB,QAAM,EAAA5B,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAE2B,IAAA,CAAAI,eAAA,IAAAJ,IAAA,CAAAI,eAAA,IAAA/B,IAAA,CAAe;IAAEP,KAAK,EAAC,cAAc;IAACoC,MAAM,EAAC;mEAEpFjC,mBAAA,CAAsE;IAA9DS,IAAI,EAAC,QAAQ;IAACZ,KAAK,EAAC;KAAkB,iBAAe,sBAC7DE,mBAAA,+FAA8F,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}