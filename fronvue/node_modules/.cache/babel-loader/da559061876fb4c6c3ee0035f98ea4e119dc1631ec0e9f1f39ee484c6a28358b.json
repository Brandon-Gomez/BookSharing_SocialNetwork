{"ast":null,"code":"import apiClient from '@/services/ApiService';\nexport default {\n  data() {\n    return {\n      newPost: {\n        title: '',\n        description: '',\n        image: null,\n        pdf: null\n      },\n      posts: [],\n      newComment: '',\n      profilePhoto: []\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.newPost.image = event.target.files[0]; // Asigna la imagen\n    },\n    onPdfChange(event) {\n      this.newPost.pdf = event.target.files[0]; // Asigna el PDF\n    },\n    async createPost() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await apiClient.post('/posts', this.newPost, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // if (this.newPost.image) {\n        //   console.info('fotito')\n        //   const formData = new FormData();\n        //   formData.append('image', this.newPost.image);\n        //   formData.append('pdf', this.newPost.pdf);\n        //   console.info(formData)\n        //   const responsePhoto = await apiClient.post(`/upload/books`, formData, {\n        //     headers: {\n        //       Authorization: `Bearer ${token}`,\n        //       'Content-Type': 'multipart/form-data',\n        //     }\n        //   });\n        //   console.log('Profile photo updated successfully:', responsePhoto.data);\n        // }\n\n        console.log(response.data);\n        this.newPost.title = '';\n        this.newPost.description = '';\n        this.newPost.image = null;\n        this.newPost.pdf = null;\n        this.getAllPosts();\n      } catch (error) {\n        console.error('Error creating post:', error);\n      }\n    },\n    async getAllPosts() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await apiClient.get('/posts/user', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.posts = response.data;\n      } catch (error) {\n        console.error('Error getting post:', error);\n      }\n    }\n    // async likePost(postId) {\n    //   await apiClient(`/posts/${postId}/like`, {\n    //     userId: this.$store.state.userId,  // Asegúrate de pasar el userId\n    //   });\n    //   this.loadPosts(); // Actualiza la lista de posts\n    // },\n    // async addComment(postId) {\n    //   if (this.newComment.trim()) {\n    //     await apiClient(`/posts/${postId}/comment`, {\n    //       userId: this.$store.state.userId,\n    //       comment: this.newComment,\n    //     });\n    //     this.newComment = '';\n    //     this.loadPosts(); // Recargar los posts con los nuevos comentarios\n    //   }\n    // },\n  },\n  mounted() {\n    this.getAllPosts(); // Cargar publicaciones al montar el componente\n  }\n};","map":{"version":3,"names":["apiClient","data","newPost","title","description","image","pdf","posts","newComment","profilePhoto","methods","onFileChange","event","target","files","onPdfChange","createPost","token","localStorage","getItem","response","post","headers","Authorization","console","log","getAllPosts","error","get","mounted"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\post_component.vue"],"sourcesContent":["<template>\r\n  <div class=\"container post-container my-4\">\r\n    <div class=\"container py-4\">\r\n      <h2 class=\"mb-4\">Crear una nueva publicación</h2>\r\n      <form @submit.prevent=\"createPost\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"title\" class=\"form-label\">Título:</label>\r\n          <input v-model=\"newPost.title\" type=\"text\" id=\"title\" class=\"form-control\"\r\n            placeholder=\"Ingrese el título de la publicación\" required />\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"description\" class=\"form-label\">Descripción:</label>\r\n          <textarea v-model=\"newPost.description\" id=\"description\" class=\"form-control\" rows=\"4\"\r\n            placeholder=\"Escriba la descripción aquí\" required></textarea>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"photo\" class=\"form-label\">Subir Foto:</label>\r\n          <input type=\"file\" id=\"photo\" class=\"form-control\" @change=\"onFileChange\" accept=\"image/*\" />\r\n        </div>\r\n        <div class=\"mb-4\">\r\n          <label for=\"book\" class=\"form-label\">Subir Libro (PDF):</label>\r\n          <input type=\"file\" id=\"book\" class=\"form-control\" @change=\"onPdfChange\" accept=\"application/pdf\" />\r\n        </div>\r\n        <button type=\"submit\" class=\"btn btn-primary w-100\">Publicar</button>\r\n      </form>\r\n    </div>\r\n\r\n    <h2>Publicaciones recientes:</h2>\r\n    <div v-for=\"post in posts.slice(0, 3)\" :key=\"post.id\" class=\"card mb-4 shadow-sm\">\r\n      <div class=\"card-body\">\r\n        <h2 class=\"card-title\">{{ post.title }}</h2>\r\n        <p class=\"text-muted small mb-2\">subido por {{ post.username }}</p>\r\n        <p class=\"card-text\">{{ post.description }}</p>\r\n        <img v-if=\"post.photo_url\" :src=\"`/uploads/photos/${post.photo_url}`\" alt=\"Post Image\"\r\n          class=\"img-fluid rounded my-3\" />\r\n        <div class=\"d-flex justify-content-between align-items-center\">\r\n          <a v-if=\"post.book_url\" :href=\"`/uploads/book/${post.book_url}`\" target=\"_blank\" class=\"btn btn-primary\">\r\n            📄 Ver libro (PDF)\r\n          </a>\r\n          <button @click=\"likePost(post.id)\" class=\"btn btn-success\">\r\n            👍 Like ( {{ post.likes_count || 0 }} )\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport apiClient from '@/services/ApiService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      newPost: {\r\n        title: '',\r\n        description: '',\r\n        image: null,\r\n        pdf: null,\r\n      },\r\n      posts: [],\r\n      newComment: '',\r\n      profilePhoto: [],\r\n    };\r\n  },\r\n  methods: {\r\n    onFileChange(event) {\r\n      this.newPost.image = event.target.files[0]; // Asigna la imagen\r\n    },\r\n    onPdfChange(event) {\r\n      this.newPost.pdf = event.target.files[0]; // Asigna el PDF\r\n    },\r\n    async createPost() {\r\n      try {\r\n        const token = localStorage.getItem('authToken');\r\n        const response = await apiClient.post('/posts', this.newPost, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          }\r\n        })\r\n\r\n        // if (this.newPost.image) {\r\n        //   console.info('fotito')\r\n        //   const formData = new FormData();\r\n        //   formData.append('image', this.newPost.image);\r\n        //   formData.append('pdf', this.newPost.pdf);\r\n        //   console.info(formData)\r\n        //   const responsePhoto = await apiClient.post(`/upload/books`, formData, {\r\n        //     headers: {\r\n        //       Authorization: `Bearer ${token}`,\r\n        //       'Content-Type': 'multipart/form-data',\r\n        //     }\r\n        //   });\r\n        //   console.log('Profile photo updated successfully:', responsePhoto.data);\r\n        // }\r\n\r\n\r\n        console.log(response.data)\r\n        this.newPost.title = '';\r\n        this.newPost.description = '';\r\n        this.newPost.image = null;\r\n        this.newPost.pdf = null;\r\n\r\n        this.getAllPosts()\r\n\r\n      } catch (error) {\r\n        console.error('Error creating post:', error);\r\n      }\r\n    },\r\n    async getAllPosts() {\r\n      try {\r\n        const token = localStorage.getItem('authToken');\r\n        const response = await apiClient.get('/posts/user', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n        )\r\n        this.posts = response.data;\r\n      } catch (error) {\r\n        console.error('Error getting post:', error);\r\n      }\r\n    },\r\n    // async likePost(postId) {\r\n    //   await apiClient(`/posts/${postId}/like`, {\r\n    //     userId: this.$store.state.userId,  // Asegúrate de pasar el userId\r\n    //   });\r\n    //   this.loadPosts(); // Actualiza la lista de posts\r\n    // },\r\n    // async addComment(postId) {\r\n    //   if (this.newComment.trim()) {\r\n    //     await apiClient(`/posts/${postId}/comment`, {\r\n    //       userId: this.$store.state.userId,\r\n    //       comment: this.newComment,\r\n    //     });\r\n    //     this.newComment = '';\r\n    //     this.loadPosts(); // Recargar los posts con los nuevos comentarios\r\n    //   }\r\n    // },\r\n  },\r\n  mounted() {\r\n    this.getAllPosts(); // Cargar publicaciones al montar el componente\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Agrega estilo para mejorar la presentación */\r\n.post {\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.post-container {\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  /* Blanco con 90% de opacidad */\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.card-title {\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.text-muted {\r\n  font-size: 0.9rem;\r\n  font-style: italic;\r\n}\r\n\r\n.img-fluid {\r\n  max-height: 300px;\r\n  /* Limitar la altura de la imagen si es muy grande */\r\n  object-fit: cover;\r\n}\r\n\r\n.container {\r\n  max-width: 600px;\r\n}\r\n\r\n.form-label {\r\n  font-weight: bold;\r\n}\r\n\r\n.btn {\r\n  font-size: 1.1em;\r\n  padding: 10px;\r\n}\r\n</style>"],"mappings":"AAkDA,OAAOA,SAAQ,MAAO,uBAAuB;AAE7C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE,EAAE;QACfC,KAAK,EAAE,IAAI;QACXC,GAAG,EAAE;MACP,CAAC;MACDC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAACC,KAAK,EAAE;MAClB,IAAI,CAACV,OAAO,CAACG,KAAI,GAAIO,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;IAC9C,CAAC;IACDC,WAAWA,CAACH,KAAK,EAAE;MACjB,IAAI,CAACV,OAAO,CAACI,GAAE,GAAIM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;IAC5C,CAAC;IACD,MAAME,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC/C,MAAMC,QAAO,GAAI,MAAMpB,SAAS,CAACqB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAACnB,OAAO,EAAE;UAC5DoB,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,KAAK;UAChC;QACF,CAAC;;QAED;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAGAO,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACnB,IAAI;QACzB,IAAI,CAACC,OAAO,CAACC,KAAI,GAAI,EAAE;QACvB,IAAI,CAACD,OAAO,CAACE,WAAU,GAAI,EAAE;QAC7B,IAAI,CAACF,OAAO,CAACG,KAAI,GAAI,IAAI;QACzB,IAAI,CAACH,OAAO,CAACI,GAAE,GAAI,IAAI;QAEvB,IAAI,CAACoB,WAAW,CAAC;MAEnB,EAAE,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACD,MAAMD,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMT,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC/C,MAAMC,QAAO,GAAI,MAAMpB,SAAS,CAAC4B,GAAG,CAAC,aAAa,EAAE;UAClDN,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,KAAK;UAChC;QACF,CACA;QACA,IAAI,CAACV,KAAI,GAAIa,QAAQ,CAACnB,IAAI;MAC5B,EAAE,OAAO0B,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACH,WAAW,CAAC,CAAC,EAAE;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}