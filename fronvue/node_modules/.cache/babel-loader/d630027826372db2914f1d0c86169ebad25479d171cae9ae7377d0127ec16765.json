{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container-fluid mt-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _cache[0] || (_cache[0] = [_createElementVNode(\"div\", {\n    class: \"w-50\"\n  }, null, -1 /* HOISTED */)]));\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_cache","_createElementVNode"],"sources":["D:\\Downloads\\BookSharing_SocialNetwork\\fronvue\\src\\components\\admin\\post-edit_component.vue"],"sourcesContent":["<template>\r\n    <div class=\"container-fluid mt-4\">\r\n        <div class=\"w-50\">\r\n            \r\n        </div>\r\n       \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport apiClient from \"@/services/ApiService\";\r\nimport eventBus from \"@/eventBus.js\";\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            postData: null,\r\n            image: null,\r\n            pdf: null,\r\n        };\r\n    },\r\n    methods: {\r\n        async fetchPost() {\r\n            try {\r\n                const token = localStorage.getItem(\"authToken\");\r\n                const postId = this.$route.params.postId;\r\n                const response = await apiClient.get(`/posts/${postId}`, {\r\n                    headers: { Authorization: `Bearer ${token}` }\r\n                });\r\n                this.postData = response.data;\r\n            } catch (error) {\r\n                console.error(\"Error al obtener la publicación:\", error.response?.data || error);\r\n                alert(\"Error al obtener la publicación.\");\r\n            }\r\n        },\r\n        onImageChange(event) {\r\n            this.image = event.target.files[0];\r\n        },\r\n        onPdfChange(event) {\r\n            this.pdf = event.target.files[0];\r\n        },\r\n        async updatePost() {\r\n            try {\r\n                const token = localStorage.getItem(\"authToken\");\r\n                const postId = this.$route.params.postId;\r\n                const formData = new FormData();\r\n                formData.append(\"title\", this.postData.title);\r\n                formData.append(\"description\", this.postData.description);\r\n                if (this.image) formData.append(\"images\", this.image);\r\n                if (this.pdf) formData.append(\"pdf\", this.pdf);\r\n\r\n                await apiClient.put(`/posts/${postId}`, formData, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"multipart/form-data\"\r\n                    }\r\n                });\r\n                this.$router.push({\r\n                    path: \"/admin/posts-list\",\r\n                    query: { alert: \"Publicación actualizada exitosamente\", type: \"success\" }\r\n                });\r\n            } catch (error) {\r\n                // Muestra la alerta en la misma vista si falla\r\n                eventBus.emit('alert', { message: \"Error al actualizar la publicación.\", type: \"danger\" });\r\n                console.error(\"Error al actualizar la publicación:\", error.response?.data || error);\r\n            }\r\n        },\r\n        cancel() {\r\n            this.$router.push(\"/admin/posts-list\");\r\n        }\r\n    },\r\n    mounted() {\r\n        this.fetchPost();\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n    max-width: 600px;\r\n}\r\n</style>"],"mappings":";;EACSA,KAAK,EAAC;AAAsB;;uBAAjCC,mBAAA,CAKM,OALNC,UAKM,EAAAC,MAAA,QAAAA,MAAA,OAJFC,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAM,2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}