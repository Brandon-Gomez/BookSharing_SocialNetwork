{"ast":null,"code":"import MainLayout from \"@/layouts/MainLayout.vue\";\nimport apiClient from \"../services/ApiService.js\";\nimport PdfPreview from \"@/components/pdfpreview_component.vue\";\nexport default {\n  data() {\n    return {\n      categories: [],\n      post: {\n        id: null,\n        title: \"\",\n        description: \"\",\n        user_id: null,\n        image: \"\",\n        pdf_file: \"\",\n        created_at: \"\",\n        updated_at: \"\",\n        views: 0,\n        category_id: null,\n        username: \"\"\n      },\n      loading: true,\n      error: null\n    };\n  },\n  async beforeMount() {\n    try {\n      this.post.id = this.$route.params.postId;\n      if (this.post.id == null || this.post.id == undefined) {\n        this.error = \"No se pudo cargar la información del libro.\";\n        return;\n      }\n      const response = await apiClient.get(`/posts/${this.$route.params.postId}`);\n      // formatea en español 2025-05-19T16:53:10.117Z a una fecha legible\n      const date = new Date(response.data.created_at);\n      const options = {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n      };\n      const formattedDate = date.toLocaleDateString(\"es-ES\", options);\n      this.post = response.data;\n      this.post.created_at = formattedDate;\n      // this.loading = false;\n    } catch (err) {\n      this.error = \"No se pudo cargar la información del libro.\";\n      this.loading = false;\n    }\n    // consultar todas las categorias\n    // token\n    try {\n      const res = await apiClient.get(\"/admin/categories\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n        }\n      });\n      this.categories = res.data;\n    } catch (err) {\n      this.error = \"No se pudo cargar la información de las categorias.\";\n    }\n  },\n  components: {\n    MainLayout\n  }\n};","map":{"version":3,"names":["MainLayout","apiClient","PdfPreview","data","categories","post","id","title","description","user_id","image","pdf_file","created_at","updated_at","views","category_id","username","loading","error","beforeMount","$route","params","postId","undefined","response","get","date","Date","options","year","month","day","formattedDate","toLocaleDateString","err","res","headers","Authorization","localStorage","getItem","components"],"sources":["D:\\Downloads\\BookSharing_SocialNetwork\\fronvue\\src\\views\\post_view.vue"],"sourcesContent":["<template>\r\n  <MainLayout>\r\n  \r\n  </MainLayout>\r\n</template>\r\n\r\n<script>\r\nimport MainLayout from \"@/layouts/MainLayout.vue\";\r\nimport apiClient from \"../services/ApiService.js\";\r\nimport PdfPreview from \"@/components/pdfpreview_component.vue\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      categories: [],\r\n      post: {\r\n        id: null,\r\n        title: \"\",\r\n        description: \"\",\r\n        user_id: null,\r\n        image: \"\",\r\n        pdf_file: \"\",\r\n        created_at: \"\",\r\n        updated_at: \"\",\r\n        views: 0,\r\n        category_id: null,\r\n        username: \"\",\r\n      },\r\n      loading: true,\r\n      error: null,\r\n    };\r\n  },\r\n  async beforeMount() {\r\n    try {\r\n      this.post.id = this.$route.params.postId;\r\n      if (this.post.id == null || this.post.id == undefined) {\r\n        this.error = \"No se pudo cargar la información del libro.\";\r\n        return;\r\n      }\r\n\r\n      const response = await apiClient.get(\r\n        `/posts/${this.$route.params.postId}`\r\n      );\r\n      // formatea en español 2025-05-19T16:53:10.117Z a una fecha legible\r\n      const date = new Date(response.data.created_at);\r\n      const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n      const formattedDate = date.toLocaleDateString(\"es-ES\", options);\r\n      this.post = response.data;\r\n      this.post.created_at = formattedDate;\r\n      // this.loading = false;\r\n    } catch (err) {\r\n      this.error = \"No se pudo cargar la información del libro.\";\r\n      this.loading = false;\r\n    }\r\n    // consultar todas las categorias\r\n    // token\r\n    try {\r\n      const res = await apiClient.get(\"/admin/categories\", {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\r\n        },\r\n      });\r\n      this.categories = res.data;\r\n    } catch (err) {\r\n      this.error = \"No se pudo cargar la información de las categorias.\";\r\n    }\r\n  },\r\n  components: { MainLayout },\r\n};\r\n</script>\r\n"],"mappings":"AAOA,OAAOA,UAAS,MAAO,0BAA0B;AACjD,OAAOC,SAAQ,MAAO,2BAA2B;AACjD,OAAOC,UAAS,MAAO,uCAAuC;AAE9D,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,IAAI,EAAE;QACJC,EAAE,EAAE,IAAI;QACRC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE,EAAE;QACfC,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,UAAU,EAAE,EAAE;QACdC,KAAK,EAAE,CAAC;QACRC,WAAW,EAAE,IAAI;QACjBC,QAAQ,EAAE;MACZ,CAAC;MACDC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACD,MAAMC,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,IAAI,CAACd,IAAI,CAACC,EAAC,GAAI,IAAI,CAACc,MAAM,CAACC,MAAM,CAACC,MAAM;MACxC,IAAI,IAAI,CAACjB,IAAI,CAACC,EAAC,IAAK,IAAG,IAAK,IAAI,CAACD,IAAI,CAACC,EAAC,IAAKiB,SAAS,EAAE;QACrD,IAAI,CAACL,KAAI,GAAI,6CAA6C;QAC1D;MACF;MAEA,MAAMM,QAAO,GAAI,MAAMvB,SAAS,CAACwB,GAAG,CAClC,UAAU,IAAI,CAACL,MAAM,CAACC,MAAM,CAACC,MAAM,EACrC,CAAC;MACD;MACA,MAAMI,IAAG,GAAI,IAAIC,IAAI,CAACH,QAAQ,CAACrB,IAAI,CAACS,UAAU,CAAC;MAC/C,MAAMgB,OAAM,GAAI;QAAEC,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE,MAAM;QAAEC,GAAG,EAAE;MAAU,CAAC;MAClE,MAAMC,aAAY,GAAIN,IAAI,CAACO,kBAAkB,CAAC,OAAO,EAAEL,OAAO,CAAC;MAC/D,IAAI,CAACvB,IAAG,GAAImB,QAAQ,CAACrB,IAAI;MACzB,IAAI,CAACE,IAAI,CAACO,UAAS,GAAIoB,aAAa;MACpC;IACF,EAAE,OAAOE,GAAG,EAAE;MACZ,IAAI,CAAChB,KAAI,GAAI,6CAA6C;MAC1D,IAAI,CAACD,OAAM,GAAI,KAAK;IACtB;IACA;IACA;IACA,IAAI;MACF,MAAMkB,GAAE,GAAI,MAAMlC,SAAS,CAACwB,GAAG,CAAC,mBAAmB,EAAE;QACnDW,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC5D;MACF,CAAC,CAAC;MACF,IAAI,CAACnC,UAAS,GAAI+B,GAAG,CAAChC,IAAI;IAC5B,EAAE,OAAO+B,GAAG,EAAE;MACZ,IAAI,CAAChB,KAAI,GAAI,qDAAqD;IACpE;EACF,CAAC;EACDsB,UAAU,EAAE;IAAExC;EAAW;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}