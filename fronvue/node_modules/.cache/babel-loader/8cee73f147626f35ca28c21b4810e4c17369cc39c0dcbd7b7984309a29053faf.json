{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiClient from '@/services/ApiService';\nexport default {\n  data() {\n    return {\n      users: []\n    };\n  },\n  methods: {\n    async fetchUsers() {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (!token) {\n          this.isAuth = false;\n          return;\n        }\n        const response = await apiClient.get(`/admin/users`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.posts = response.data;\n      } catch (error) {\n        console.error('Error al obtener los usuarios:', error);\n      }\n    },\n    createUser() {\n      this.$router.push('/admin/create-user'); // Redirige a la vista de creación de usuario\n    },\n    editUser(userId) {\n      this.$router.push(`/admin/edit-user/${userId}`); // Redirige a la vista de edición de usuario\n    },\n    async deleteUser(userId) {\n      if (confirm('¿Estás seguro de que deseas eliminar este usuario?')) {\n        try {\n          await apiClient.delete(`/users/${userId}`); // Asegúrate de que esta ruta exista en tu backend\n          this.users = this.users.filter(user => user.id !== userId); // Actualiza la lista local\n          alert('Usuario eliminado correctamente.');\n        } catch (error) {\n          console.error('Error al eliminar el usuario:', error);\n        }\n      }\n    }\n  },\n  mounted() {\n    this.fetchUsers(); // Carga los usuarios al montar el componente\n  }\n};","map":{"version":3,"names":["apiClient","data","users","methods","fetchUsers","token","localStorage","getItem","isAuth","response","get","headers","Authorization","posts","error","console","createUser","$router","push","editUser","userId","deleteUser","confirm","delete","filter","user","id","alert","mounted"],"sources":["D:\\Downloads\\BookSharing_SocialNetwork\\fronvue\\src\\components\\admin\\users-list_component.vue"],"sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n  <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n      <h2>Lista de Usuarios</h2>\r\n      <button class=\"btn btn-primary\" @click=\"createUser\">Crear Usuario</button>\r\n    </div>\r\n    <table class=\"table table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Nombre</th>\r\n          <th>Correo</th>\r\n          <th>Usuario</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(user, index) in users\" :key=\"user.id\">\r\n          <td>{{ index + 1 }}</td>\r\n          <td>{{ user.name }}</td>\r\n          <td>{{ user.email }}</td>\r\n          <td>{{ user.username }}</td>\r\n          <td>\r\n            <button class=\"btn btn-warning btn-sm me-2\" @click=\"editUser(user.id)\">Editar</button>\r\n            <button class=\"btn btn-danger btn-sm\" @click=\"deleteUser(user.id)\">Eliminar</button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n    \r\n</template>\r\n\r\n<script>\r\nimport apiClient from '@/services/ApiService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      users: [],\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchUsers() {\r\n      try {\r\n\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n          this.isAuth = false\r\n          return\r\n        }\r\n        const response = await apiClient.get(`/admin/users`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n        this.posts = response.data;\r\n\r\n\r\n      } catch (error) {\r\n        console.error('Error al obtener los usuarios:', error);\r\n      }\r\n    },\r\n    createUser() {\r\n      this.$router.push('/admin/create-user'); // Redirige a la vista de creación de usuario\r\n    },\r\n    editUser(userId) {\r\n      this.$router.push(`/admin/edit-user/${userId}`); // Redirige a la vista de edición de usuario\r\n    },\r\n    async deleteUser(userId) {\r\n      if (confirm('¿Estás seguro de que deseas eliminar este usuario?')) {\r\n        try {\r\n          await apiClient.delete(`/users/${userId}`); // Asegúrate de que esta ruta exista en tu backend\r\n          this.users = this.users.filter(user => user.id !== userId); // Actualiza la lista local\r\n          alert('Usuario eliminado correctamente.');\r\n        } catch (error) {\r\n          console.error('Error al eliminar el usuario:', error);\r\n        }\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchUsers(); // Carga los usuarios al montar el componente\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.table {\r\n  margin-top: 20px;\r\n}\r\n</style>"],"mappings":";AAkCA,OAAOA,SAAQ,MAAO,uBAAuB;AAE7C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QAEF,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC/C,IAAI,CAACF,KAAK,EAAE;UACV,IAAI,CAACG,MAAK,GAAI,KAAI;UAClB;QACF;QACA,MAAMC,QAAO,GAAI,MAAMT,SAAS,CAACU,GAAG,CAAC,cAAc,EAAE;UACnDC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUP,KAAK;UAChC;QACF,CAAC,CAAC;QACF,IAAI,CAACQ,KAAI,GAAIJ,QAAQ,CAACR,IAAI;MAG5B,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IACDE,UAAUA,CAAA,EAAG;MACX,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,oBAAoB,CAAC,EAAE;IAC3C,CAAC;IACDC,QAAQA,CAACC,MAAM,EAAE;MACf,IAAI,CAACH,OAAO,CAACC,IAAI,CAAC,oBAAoBE,MAAM,EAAE,CAAC,EAAE;IACnD,CAAC;IACD,MAAMC,UAAUA,CAACD,MAAM,EAAE;MACvB,IAAIE,OAAO,CAAC,oDAAoD,CAAC,EAAE;QACjE,IAAI;UACF,MAAMtB,SAAS,CAACuB,MAAM,CAAC,UAAUH,MAAM,EAAE,CAAC,EAAE;UAC5C,IAAI,CAAClB,KAAI,GAAI,IAAI,CAACA,KAAK,CAACsB,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,EAAC,KAAMN,MAAM,CAAC,EAAE;UAC5DO,KAAK,CAAC,kCAAkC,CAAC;QAC3C,EAAE,OAAOb,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACvD;MACF;IACF;EACF,CAAC;EACDc,OAAOA,CAAA,EAAG;IACR,IAAI,CAACxB,UAAU,CAAC,CAAC,EAAE;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}