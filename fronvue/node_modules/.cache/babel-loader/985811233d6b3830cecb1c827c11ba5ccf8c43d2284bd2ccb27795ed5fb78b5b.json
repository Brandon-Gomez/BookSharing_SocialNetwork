{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = [\"href\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", null, \"Create a New Post\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.createPost && $options.createPost(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Description:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newPost.description = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newPost.description]])]), _createElementVNode(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    for: \"photo\"\n  }, \"Upload Photo:\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.onFileChange && $options.onFileChange(...args)),\n    required: \"\"\n  }, null, 32 /* NEED_HYDRATION */)]), _createElementVNode(\"div\", null, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    for: \"book\"\n  }, \"Upload Book (PDF):\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[2] || (_cache[2] = (...args) => $options.onPdfChange && $options.onPdfChange(...args)),\n    required: \"\"\n  }, null, 32 /* NEED_HYDRATION */)]), _cache[8] || (_cache[8] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Post\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), _cache[11] || (_cache[11] = _createElementVNode(\"h2\", null, \"All Posts\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id,\n      class: \"post\"\n    }, [_createElementVNode(\"h3\", null, _toDisplayString(post.username), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(post.description), 1 /* TEXT */), post.photo_url ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: `/uploads/photos/${post.photo_url}`,\n      alt: \"Post Image\"\n    }, null, 8 /* PROPS */, _hoisted_1)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"a\", {\n      href: `/uploads/book/${post.book_url}`,\n      target: \"_blank\"\n    }, \"View Book (PDF)\", 8 /* PROPS */, _hoisted_2), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.likePost(post.id)\n    }, \"Like (\" + _toDisplayString(post.likes_count) + \")\", 9 /* TEXT, PROPS */, _hoisted_3)]), _cache[9] || (_cache[9] = _createElementVNode(\"h4\", null, \"Comments:\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(post.comments, comment => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: comment.id\n      }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(comment.username) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(comment.comment), 1 /* TEXT */)])]);\n    }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.newComment = $event),\n      placeholder: \"Add a comment\"\n    }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newComment]]), _createElementVNode(\"button\", {\n      onClick: $event => $options.addComment(post.id)\n    }, \"Comment\", 8 /* PROPS */, _hoisted_4)])]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","createPost","for","$event","$data","newPost","description","required","type","onChange","onFileChange","onPdfChange","_Fragment","_renderList","posts","post","key","id","class","_toDisplayString","username","photo_url","src","alt","_hoisted_1","_createCommentVNode","href","book_url","target","_hoisted_2","onClick","likePost","likes_count","_hoisted_3","comments","comment","_createTextVNode","newComment","placeholder","addComment","_hoisted_4"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\post_component.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Create a New Post</h2>\r\n      <form @submit.prevent=\"createPost\">\r\n        <div>\r\n          <label for=\"description\">Description:</label>\r\n          <textarea v-model=\"newPost.description\" required></textarea>\r\n        </div>\r\n        <div>\r\n          <label for=\"photo\">Upload Photo:</label>\r\n          <input type=\"file\" @change=\"onFileChange\" required />\r\n        </div>\r\n        <div>\r\n          <label for=\"book\">Upload Book (PDF):</label>\r\n          <input type=\"file\" @change=\"onPdfChange\" required />\r\n        </div>\r\n        <button type=\"submit\">Post</button>\r\n      </form>\r\n  \r\n      <h2>All Posts</h2>\r\n      <div v-for=\"post in posts\" :key=\"post.id\" class=\"post\">\r\n        <h3>{{ post.username }}</h3>\r\n        <p>{{ post.description }}</p>\r\n        <img :src=\"`/uploads/photos/${post.photo_url}`\" alt=\"Post Image\" v-if=\"post.photo_url\" />\r\n        <a :href=\"`/uploads/book/${post.book_url}`\" target=\"_blank\">View Book (PDF)</a>\r\n        <div>\r\n          <button @click=\"likePost(post.id)\">Like ({{ post.likes_count }})</button>\r\n        </div>\r\n  \r\n        <h4>Comments:</h4>\r\n        <div v-for=\"comment in post.comments\" :key=\"comment.id\">\r\n          <p><strong>{{ comment.username }}:</strong> {{ comment.comment }}</p>\r\n        </div>\r\n        <div>\r\n          <input v-model=\"newComment\" placeholder=\"Add a comment\" />\r\n          <button @click=\"addComment(post.id)\">Comment</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n\r\n  import apiClient from '@/services/ApiService';\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        newPost: {\r\n          description: '',\r\n          image: null,\r\n          pdf: null,\r\n        },\r\n        posts: [],\r\n        newComment: '',\r\n      };\r\n    },\r\n    methods: {\r\n      onFileChange(event) {\r\n        this.newPost.image = event.target.files[0]; // Asigna la imagen\r\n      },\r\n      onPdfChange(event) {\r\n        this.newPost.pdf = event.target.files[0]; // Asigna el PDF\r\n      },\r\n      async createPost() {\r\n        try {\r\n          const formData = new FormData();\r\n          formData.append('userId', this.$store.state.userId); // Asegúrate de enviar el userId del usuario logueado\r\n          formData.append('description', this.newPost.description);\r\n          formData.append('photo', this.newPost.image);\r\n          formData.append('book', this.newPost.pdf);\r\n  \r\n          // Realizamos la solicitud POST al backend\r\n          const response = await apiClient('/posts', formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data',\r\n            },\r\n          });\r\n  \r\n          this.posts.push(response.data); // Agregamos la nueva publicación a la lista\r\n          this.newPost.description = '';\r\n          this.newPost.image = null;\r\n          this.newPost.pdf = null;\r\n        } catch (error) {\r\n          console.error('Error creating post:', error);\r\n        }\r\n      },\r\n      async loadPosts() {\r\n        const response = await apiClient('/posts');\r\n        this.posts = response.data;\r\n      },\r\n      async likePost(postId) {\r\n        await apiClient(`/posts/${postId}/like`, {\r\n          userId: this.$store.state.userId,  // Asegúrate de pasar el userId\r\n        });\r\n        this.loadPosts(); // Actualiza la lista de posts\r\n      },\r\n      async addComment(postId) {\r\n        if (this.newComment.trim()) {\r\n          await apiClient(`/posts/${postId}/comment`, {\r\n            userId: this.$store.state.userId,\r\n            comment: this.newComment,\r\n          });\r\n          this.newComment = '';\r\n          this.loadPosts(); // Recargar los posts con los nuevos comentarios\r\n        }\r\n      },\r\n    },\r\n    mounted() {\r\n      this.loadPosts(); // Cargar publicaciones al montar el componente\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Agrega estilo para mejorar la presentación */\r\n  .post {\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    margin-bottom: 20px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}