{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { loginUser } from '../services/useAuth';\nimport btnGoogleAuth_component from './btn-google-auth_component.vue';\nimport { ref } from 'vue';\nimport jwt_decode from 'jwt-decode'; // A popular library to decode JWT\n\nconst userProfile = ref(null);\nconst callback = response => {\n  console.log(\"Handle the response\", response);\n\n  // Check if we received a credential (JWT)\n  if (response?.credential) {\n    try {\n      // Decode the JWT to extract profile info\n      const decoded = jwt_decode(response.credential);\n      console.log('Decoded JWT:', decoded);\n\n      // Extract user profile information from decoded JWT\n      userProfile.value = {\n        name: decoded.name,\n        email: decoded.email,\n        imageUrl: decoded.picture // Profile picture URL\n      };\n    } catch (error) {\n      console.error('Failed to decode JWT:', error);\n    }\n  }\n};\nexport default {\n  components: {\n    btnGoogleAuth_component\n  },\n  data() {\n    return {\n      loginEmail: '',\n      loginPassword: ''\n    };\n  },\n  mounted() {\n    const token = localStorage.getItem('authToken');\n    const username = localStorage.getItem('username');\n    if (token && username) {\n      this.$router.push(`/profile/${username}`);\n    }\n  },\n  methods: {\n    async handleLogin() {\n      try {\n        await loginUser({\n          email: this.loginEmail,\n          password: this.loginPassword,\n          router: this.$router\n        });\n      } catch (error) {\n        alert('Credenciales incorrectas');\n      }\n    }\n  }\n};","map":{"version":3,"names":["loginUser","btnGoogleAuth_component","ref","jwt_decode","userProfile","callback","response","console","log","credential","decoded","value","name","email","imageUrl","picture","error","components","data","loginEmail","loginPassword","mounted","token","localStorage","getItem","username","$router","push","methods","handleLogin","password","router","alert"],"sources":["D:\\Downloads\\BookSharing_SocialNetwork\\fronvue\\src\\components\\login_component.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <main class=\"main\" id=\"top\">\r\n      <div class=\"container-fluid px-0\">\r\n        <div class=\"row vh-100 g-0\">\r\n          <div class=\"col-lg-6 position-relative d-none d-lg-block\" :style=\"`background-image: url(${require('@/assets/bg-bib.jpg')}); background-size: cover; background-position: center;`\">\r\n            <div class=\"bg-holder \">\r\n            </div> \r\n          </div>\r\n          <div class=\"col-lg-6\">\r\n            <div class=\"row flex h-100 g-0 px-4 px-sm-0 align-items-center\">\r\n              <div class=\"col col-sm-6 col-lg-7 col-xl-6\" style=\"margin-inline:auto\"><a class=\"d-flex flex-center text-decoration-none \" >\r\n                  <div class=\"d-flex align-items-center fw-bolder fs-5 d-inline-block\"><img src=\"@/assets/LogoRM.png\" alt=\"phoenix\" width=\"150\">\r\n                  </div>\r\n                </a>\r\n                <div class=\"text-center mb-7\">\r\n                  <h3 class=\"text-1000\">Iniciar Sesión</h3>\r\n                  <p class=\"text-700\">Sigue donde lo dejaste</p>\r\n                </div>\r\n                <btnGoogleAuth_component/>\r\n                <form @submit.prevent=\"handleLogin\">\r\n                  <div class=\"mb-3 text-start\">\r\n                    <label class=\"form-label\" for=\"email\">Email</label>\r\n                    <input class=\"form-control\" name=\"\" id=\"email\" type=\"email\" placeholder=\"name@example.com\" v-model=\"loginEmail\">\r\n                  </div>\r\n                \r\n                  <div class=\"mb-3 text-start\">\r\n                    <label class=\"form-label\" for=\"email\">Contraseña</label>\r\n                    <input class=\"form-control\" id=\"email\" type=\"password\"\r\n                    autocomplete=\"current-password\"\r\n                     placeholder=\"Contraseña\" v-model=\"loginPassword\">\r\n                  </div>\r\n                \r\n                  <button class=\"btn btn-primary w-100 mb-3\">Iniciar sesión</button>\r\n                  <div class=\"text-center\"><a class=\"fs--1 \" href=\"/register\">¿No tienes cuenta? Registrate</a></div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script >\r\nimport { loginUser } from '../services/useAuth';\r\nimport btnGoogleAuth_component from './btn-google-auth_component.vue';\r\n\r\nimport { ref } from 'vue'\r\nimport jwt_decode from 'jwt-decode' // A popular library to decode JWT\r\n \r\nconst userProfile = ref(null)\r\n \r\nconst callback = (response) => {\r\n  console.log(\"Handle the response\", response)\r\n \r\n  // Check if we received a credential (JWT)\r\n  if (response?.credential) {\r\n    try {\r\n      // Decode the JWT to extract profile info\r\n      const decoded = jwt_decode(response.credential)\r\n      console.log('Decoded JWT:', decoded)\r\n \r\n      // Extract user profile information from decoded JWT\r\n      userProfile.value = {\r\n        name: decoded.name,\r\n        email: decoded.email,\r\n        imageUrl: decoded.picture,  // Profile picture URL\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to decode JWT:', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport default {\r\n\r\n  components: {\r\n    btnGoogleAuth_component,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      loginEmail: '',\r\n      loginPassword: '',\r\n    };\r\n  },\r\n  mounted() {\r\n    const token = localStorage.getItem('authToken');\r\n    const username = localStorage.getItem('username');\r\n    if (token && username) {\r\n      this.$router.push(`/profile/${username}`);\r\n    }\r\n  },\r\n  methods: {\r\n\r\n     async handleLogin() {\r\n      try {\r\n        await loginUser({\r\n          email: this.loginEmail,\r\n          password: this.loginPassword,\r\n          router: this.$router,\r\n        }); \r\n      } catch (error) {\r\n        alert('Credenciales incorrectas');\r\n      }\r\n    },\r\n  },\r\n \r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.flex-center {\r\n    -webkit-box-align: center !important;\r\n    -ms-flex-align: center!important;\r\n    align-items: center!important;\r\n    -webkit-box-pack: center!important;\r\n    -ms-flex-pack: center!important;\r\n    justify-content: center!important;\r\n}\r\n</style>"],"mappings":";AA+CA,SAASA,SAAQ,QAAS,qBAAqB;AAC/C,OAAOC,uBAAsB,MAAO,iCAAiC;AAErE,SAASC,GAAE,QAAS,KAAI;AACxB,OAAOC,UAAS,MAAO,YAAW,EAAE;;AAEpC,MAAMC,WAAU,GAAIF,GAAG,CAAC,IAAI;AAE5B,MAAMG,QAAO,GAAKC,QAAQ,IAAK;EAC7BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,QAAQ;;EAE3C;EACA,IAAIA,QAAQ,EAAEG,UAAU,EAAE;IACxB,IAAI;MACF;MACA,MAAMC,OAAM,GAAIP,UAAU,CAACG,QAAQ,CAACG,UAAU;MAC9CF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEE,OAAO;;MAEnC;MACAN,WAAW,CAACO,KAAI,GAAI;QAClBC,IAAI,EAAEF,OAAO,CAACE,IAAI;QAClBC,KAAK,EAAEH,OAAO,CAACG,KAAK;QACpBC,QAAQ,EAAEJ,OAAO,CAACK,OAAO,CAAG;MAC9B;IACF,EAAE,OAAOC,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,uBAAuB,EAAEA,KAAK;IAC9C;EACF;AACF;AAEA,eAAe;EAEbC,UAAU,EAAE;IACVhB;EACF,CAAC;EAEDiB,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMC,QAAO,GAAIF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAIF,KAAI,IAAKG,QAAQ,EAAE;MACrB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,YAAYF,QAAQ,EAAE,CAAC;IAC3C;EACF,CAAC;EACDG,OAAO,EAAE;IAEN,MAAMC,WAAWA,CAAA,EAAG;MACnB,IAAI;QACF,MAAM7B,SAAS,CAAC;UACda,KAAK,EAAE,IAAI,CAACM,UAAU;UACtBW,QAAQ,EAAE,IAAI,CAACV,aAAa;UAC5BW,MAAM,EAAE,IAAI,CAACL;QACf,CAAC,CAAC;MACJ,EAAE,OAAOV,KAAK,EAAE;QACdgB,KAAK,CAAC,0BAA0B,CAAC;MACnC;IACF;EACF;AAEF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}