{"ast":null,"code":"import apiClient from '@/services/ApiService';\nexport default {\n  data() {\n    return {\n      profileData: {\n        name: '',\n        birthdate: '',\n        gender: '',\n        description: '',\n        profile_picture: ''\n      },\n      isCurrentUser: false,\n      // Cambiar a booleano\n      publications: 0,\n      // Datos ficticios para publicaciones\n      followers: 0,\n      // Datos ficticios para seguidores\n      following: 0 // Datos ficticios para seguidos\n    };\n  },\n  watch: {\n    '$route': 'getProfile' // Llama a getProfile cuando cambia la ruta\n  },\n  methods: {\n    async getProfile() {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        try {\n          // Obtener el username de los parámetros de la ruta\n          const username = this.$route.params.username;\n          const response = await apiClient.get(`/profile/${username}`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n\n          // Verificar la respuesta de la API\n          console.log(\"Datos de respuesta de la API:\", response.data);\n          this.profileData = response.data.user;\n          this.isCurrentUser = response.data.isCurrentUser;\n\n          // Almacenar los datos de perfil en Local Storage si es el usuario autenticado\n          if (this.isCurrentUser) {\n            localStorage.setItem('profileData', JSON.stringify(this.profileData));\n          }\n\n          // Verificar si isCurrentUser está correctamente asignado\n          console.log(\"isCurrentUser:\", this.isCurrentUser);\n        } catch (error) {\n          console.error(\"Error fetching profile:\", error);\n        }\n      }\n    },\n    getProfileImage() {\n      const staticFiles = \"http://localhost:4000/static/profiles/\";\n      return this.profileData.profile_picture ? `${staticFiles}${this.profileData.profile_picture}` : `${staticFiles}default.jpg`;\n    }\n  },\n  mounted() {\n    this.getProfile(); // Obtener el perfil al montar el componente\n  }\n};","map":{"version":3,"names":["apiClient","data","profileData","name","birthdate","gender","description","profile_picture","isCurrentUser","publications","followers","following","watch","methods","getProfile","token","localStorage","getItem","username","$route","params","response","get","headers","Authorization","console","log","user","setItem","JSON","stringify","error","getProfileImage","staticFiles","mounted"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\profile_component.vue"],"sourcesContent":["<template>\r\n  <div class=\"profile-container\">\r\n    <div class=\"profile-header\">\r\n      <img \r\n        :src=\"getProfileImage()\"\r\n        class=\"profile-image\" \r\n        alt=\"Profile Picture\" \r\n      />\r\n      <div class=\"profile-info\">\r\n        <h1>{{ profileData.name }}</h1>\r\n        <p><strong>{{ profileData.username || 'No disponible' }}</strong></p>\r\n        <div class=\"profile-stats\">\r\n          <span>{{ publications }} publicaciones</span>\r\n          <span>{{ followers }} seguidores</span>\r\n          <span>{{ following }} seguidos</span>\r\n        </div>\r\n        <p v-if=\"profileData.description\">{{ profileData.description }}</p>\r\n\r\n        <!-- Mostrar el botón de editar solo si el usuario autenticado es el mismo -->\r\n        <router-link \r\n          v-if=\"isCurrentUser\" \r\n          :to=\"`/profile/${profileData.username}/edit-account`\" \r\n          class=\"btn btn-primary w-100\"\r\n        >\r\n          Editar perfil\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n    <div class=\"profile-bio\">\r\n      <p>Blog personal: <span>{{ profileData.blog || 'No disponible' }}</span></p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport apiClient from '@/services/ApiService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      profileData: {\r\n        name: '',\r\n        birthdate: '',\r\n        gender: '',\r\n        description: '',\r\n        profile_picture: ''\r\n      },\r\n      isCurrentUser: false, // Cambiar a booleano\r\n      publications: 0,       // Datos ficticios para publicaciones\r\n      followers: 0,        // Datos ficticios para seguidores\r\n      following: 0        // Datos ficticios para seguidos\r\n    };\r\n  },\r\n  watch: {\r\n    '$route': 'getProfile', // Llama a getProfile cuando cambia la ruta\r\n  },\r\n  methods: {\r\n    async getProfile() {\r\n      const token = localStorage.getItem('authToken');\r\n\r\n      if (token) {\r\n        try {\r\n          // Obtener el username de los parámetros de la ruta\r\n          const username = this.$route.params.username;\r\n          const response = await apiClient.get(`/profile/${username}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`\r\n            }\r\n          });\r\n\r\n          // Verificar la respuesta de la API\r\n          console.log(\"Datos de respuesta de la API:\", response.data);\r\n\r\n          this.profileData = response.data.user;\r\n          this.isCurrentUser = response.data.isCurrentUser;\r\n\r\n          // Almacenar los datos de perfil en Local Storage si es el usuario autenticado\r\n          if (this.isCurrentUser) {\r\n            localStorage.setItem('profileData', JSON.stringify(this.profileData));\r\n          }\r\n\r\n          // Verificar si isCurrentUser está correctamente asignado\r\n          console.log(\"isCurrentUser:\", this.isCurrentUser);\r\n\r\n        } catch (error) {\r\n          console.error(\"Error fetching profile:\", error);\r\n        }\r\n      }\r\n    },\r\n    getProfileImage() {\r\n      const staticFiles = \"http://localhost:4000/static/profiles/\";\r\n      return this.profileData.profile_picture \r\n        ? `${staticFiles}${this.profileData.profile_picture}`\r\n        : `${staticFiles}default.jpg`;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.getProfile(); // Obtener el perfil al montar el componente\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.profile-container {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.profile-header {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.profile-image {\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50%;\r\n  margin-right: 20px;\r\n}\r\n\r\n.profile-info {\r\n  flex-grow: 1;\r\n}\r\n\r\n.profile-stats {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 10px 0;\r\n}\r\n\r\n.profile-bio {\r\n  margin-top: 20px;\r\n  border-top: 1px solid #ddd;\r\n  padding-top: 10px;\r\n}\r\n\r\n.btn {\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"AAmCA,OAAOA,SAAQ,MAAO,uBAAuB;AAE7C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE;QACXC,IAAI,EAAE,EAAE;QACRC,SAAS,EAAE,EAAE;QACbC,MAAM,EAAE,EAAE;QACVC,WAAW,EAAE,EAAE;QACfC,eAAe,EAAE;MACnB,CAAC;MACDC,aAAa,EAAE,KAAK;MAAE;MACtBC,YAAY,EAAE,CAAC;MAAQ;MACvBC,SAAS,EAAE,CAAC;MAAS;MACrBC,SAAS,EAAE,EAAS;IACtB,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACL,QAAQ,EAAE,YAAY,CAAE;EAC1B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAE/C,IAAIF,KAAK,EAAE;QACT,IAAI;UACF;UACA,MAAMG,QAAO,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,QAAQ;UAC5C,MAAMG,QAAO,GAAI,MAAMrB,SAAS,CAACsB,GAAG,CAAC,YAAYJ,QAAQ,EAAE,EAAE;YAC3DK,OAAO,EAAE;cACPC,aAAa,EAAE,UAAUT,KAAK;YAChC;UACF,CAAC,CAAC;;UAEF;UACAU,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEL,QAAQ,CAACpB,IAAI,CAAC;UAE3D,IAAI,CAACC,WAAU,GAAImB,QAAQ,CAACpB,IAAI,CAAC0B,IAAI;UACrC,IAAI,CAACnB,aAAY,GAAIa,QAAQ,CAACpB,IAAI,CAACO,aAAa;;UAEhD;UACA,IAAI,IAAI,CAACA,aAAa,EAAE;YACtBQ,YAAY,CAACY,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC5B,WAAW,CAAC,CAAC;UACvE;;UAEA;UACAuB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAClB,aAAa,CAAC;QAEnD,EAAE,OAAOuB,KAAK,EAAE;UACdN,OAAO,CAACM,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACjD;MACF;IACF,CAAC;IACDC,eAAeA,CAAA,EAAG;MAChB,MAAMC,WAAU,GAAI,wCAAwC;MAC5D,OAAO,IAAI,CAAC/B,WAAW,CAACK,eAAc,GAClC,GAAG0B,WAAW,GAAG,IAAI,CAAC/B,WAAW,CAACK,eAAe,EAAC,GAClD,GAAG0B,WAAW,aAAa;IACjC;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACpB,UAAU,CAAC,CAAC,EAAE;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}