{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"like-container\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleLike && $options.toggleLike(...args)),\n    class: _normalizeClass({\n      liked: $data.isLiked\n    })\n  }, [$data.isLiked ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, \"üíñ\")) : (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"ü§ç\"))], 2 /* CLASS */), _createElementVNode(\"span\", null, _toDisplayString($data.likeCount) + \" Me gusta\", 1 /* TEXT */)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","toggleLike","_normalizeClass","liked","$data","isLiked","_hoisted_2","_hoisted_3","_toDisplayString","likeCount"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\like_component.vue"],"sourcesContent":["<template>\r\n    <div class=\"like-container\">\r\n      <button @click=\"toggleLike\" :class=\"{ liked: isLiked }\">\r\n        <span v-if=\"isLiked\">üíñ</span>\r\n        <span v-else>ü§ç</span>\r\n      </button>\r\n      <span>{{ likeCount }} Me gusta</span>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import apiClient from \"@/services/ApiService\";\r\n  \r\n  export default {\r\n    props: {\r\n      postId: {\r\n        type: String,\r\n        required: true,\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        isLiked: false,\r\n        likeCount: 0,\r\n      };\r\n    },\r\n    async created() {\r\n      await this.fetchLikeCount();\r\n      await this.checkIfLiked(); // Verificamos si ya tiene \"like\"\r\n    },\r\n    methods: {\r\n      async fetchLikeCount() {\r\n        try {\r\n          const response = await apiClient.get(`/like/count/${this.postId}`);\r\n          this.likeCount = response.data.likeCount;\r\n        } catch (error) {\r\n          console.error(\"Error fetching like count:\", error);\r\n        }\r\n      },\r\n      async toggleLike() {\r\n        try {\r\n          const token = localStorage.getItem(\"authToken\");\r\n          if (this.isLiked) {\r\n            // Quitar \"like\"\r\n            await apiClient.delete(\r\n              `/like`,\r\n              {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n                data: { postId: this.postId },\r\n              }\r\n            );\r\n            this.likeCount--;\r\n          } else {\r\n            // Agregar \"like\"\r\n            await apiClient.post(\r\n              `/like`,\r\n              { postId: this.postId },\r\n              { headers: { Authorization: `Bearer ${token}` } }\r\n            );\r\n            this.likeCount++;\r\n          }\r\n          this.isLiked = !this.isLiked;\r\n        } catch (error) {\r\n          console.error(\"Error toggling like:\", error);\r\n        }\r\n      },\r\n      async checkIfLiked() {\r\n        try {\r\n          const token = localStorage.getItem(\"authToken\");\r\n          const response = await apiClient.get(`/like/check/${this.postId}`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          this.isLiked = response.data.isLiked;\r\n          console.log(\"Initial like state:\", this.isLiked); // Confirmaci√≥n del estado inicial en la consola\r\n        } catch (error) {\r\n          console.error(\"Error checking if liked:\", error);\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .like-container {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  button {\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: 1.5em;\r\n  }\r\n  button.liked {\r\n    color: red;\r\n  }\r\n  span {\r\n    margin-left: 0.5em;\r\n  }\r\n  </style>\r\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAgB;;EAD/BC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACIC,mBAAA,CAMM,OANNC,UAMM,GALJC,mBAAA,CAGS;IAHAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;IAAGP,KAAK,EAFxCU,eAAA;MAAAC,KAAA,EAEmDC,KAAA,CAAAC;IAAO;MACtCD,KAAA,CAAAC,OAAO,I,cAAnBX,mBAAA,CAA8B,QAHtCY,UAAA,EAG6B,IAAE,M,cACvBZ,mBAAA,CAAsB,QAJ9Ba,UAAA,EAIqB,IAAE,G,kBAEjBX,mBAAA,CAAqC,cAAAY,gBAAA,CAA5BJ,KAAA,CAAAK,SAAS,IAAG,WAAS,gB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}