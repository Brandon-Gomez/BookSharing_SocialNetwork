{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from \"../views/home_view.vue\";\nimport LoginView from '../views/login_view.vue';\nimport RegisterView from '../views/register_view.vue';\nimport ForgotPassword from \"../views/forgotpassword_view.vue\";\nimport ResetPassword from \"../views/resetpassword_view.vue\";\nimport ProfileView from \"../views/profile_view.vue\";\nimport EditProfileView from \"../views/editprofile_view.vue\";\nimport PostView from \"../views/post_view.vue\";\nimport EditPostView from \"../views/editpost_view.vue\";\nimport LikeView from \"../views/like_view.vue\";\nimport PdfPreviewView from \"../views/pdfpreview_view.vue\";\nimport FollowView from \"../views/follow_view.vue\";\nimport DashboardView from '../views/admin/dashboard_view.vue';\nimport UsersListView from '../views/admin/users-list_view.vue';\nimport UserCreateView from '../views/admin/user-create_view.vue';\nimport UserEditView from '../views/admin/user-edit_view.vue';\nimport PostsListView from '../views/admin/posts_list_view.vue';\n\n// Rutas para visitantes (no autenticados)\nconst visitorRoutes = [{\n  path: '/login',\n  name: 'Login',\n  component: LoginView,\n  meta: {\n    requiresAuth: false,\n    requiresAdmin: false,\n    onlyVisitor: true\n  }\n}, {\n  path: '/register',\n  name: 'Register',\n  component: RegisterView,\n  meta: {\n    requiresAuth: false,\n    requiresAdmin: false,\n    onlyVisitor: true\n  }\n}, {\n  path: '/forgot-password',\n  name: 'ForgotPassword',\n  component: ForgotPassword,\n  meta: {\n    requiresAuth: false,\n    requiresAdmin: false,\n    onlyVisitor: true\n  }\n}, {\n  path: '/reset-password',\n  name: 'ResetPassword',\n  component: ResetPassword,\n  meta: {\n    requiresAuth: false,\n    requiresAdmin: false,\n    onlyVisitor: true\n  }\n}];\n\n// Rutas para usuarios autenticados (no admin)\nconst userRoutes = [{\n  path: '/',\n  name: 'Home',\n  component: HomeView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: false\n  }\n}, {\n  path: '/profile/:username',\n  name: 'Profile',\n  component: ProfileView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: false\n  },\n  props: true\n}, {\n  path: '/profile/:username/edit-account',\n  name: 'EditProfile',\n  component: EditProfileView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: false\n  },\n  props: true\n}, {\n  path: '/posts',\n  name: 'PostView',\n  component: PostView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: false\n  }\n}, {\n  path: '/posts/:postId/edit-post',\n  name: 'EditPost',\n  component: EditPostView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: false\n  },\n  props: true\n}, {\n  path: '/pdf-preview',\n  name: 'PdfPreview',\n  component: PdfPreviewView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: false\n  }\n}, {\n  path: '/likes',\n  name: 'LikeView',\n  component: LikeView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: false\n  }\n}, {\n  path: '/follow',\n  name: 'FollowView',\n  component: FollowView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: false\n  }\n}];\n\n// Rutas para administradores\nconst adminRoutes = [{\n  path: '/admin/dashboard',\n  name: 'Dashboard',\n  component: DashboardView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: true\n  }\n}, {\n  path: '/admin/users-list',\n  name: 'UsersList',\n  component: UsersListView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: true\n  }\n}, {\n  path: '/admin/user-create',\n  name: 'UserCreate',\n  component: UserCreateView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: true\n  }\n}, {\n  path: '/admin/user-edit/:userId',\n  name: 'UserEdit',\n  component: UserEditView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: true\n  },\n  props: true\n},\n// post\n{\n  path: '/admin/posts-list',\n  name: 'PostsList',\n  component: PostsListView,\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: true\n  }\n}];\n\n// Unimos todas las rutas\nconst routes = [...visitorRoutes, ...userRoutes, ...adminRoutes\n// Redirección por defecto\n// { path: '/:pathMatch(.*)*', redirect: '/' }\n];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\n// Aquí puedes mejorar el guard para usar los meta correctamente\nrouter.beforeEach((to, from, next) => {\n  const token = localStorage.getItem('authToken');\n  console.log('Token:', token);\n  // Aquí puedes decodificar el token y verificar roles si lo necesitas\n\n  // Solo visitantes\n  // if (to.meta.onlyVisitor && token) {\n  //   return next({ name: 'Home' });\n  // }\n\n  // Rutas que requieren autenticación\n  if (to.meta.requiresAuth && !token) {\n    return next({\n      name: 'Login'\n    });\n  }\n\n  // Rutas que requieren admin\n  if (to.meta.requiresAdmin) {\n    // Aquí deberías verificar si el usuario es admin (por ejemplo, decodificando el token)\n    // Si no es admin, redirige a Home\n    // Ejemplo:\n    // if (!decoded.isAdmin) return next({ name: 'Home' });\n  }\n  next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","LoginView","RegisterView","ForgotPassword","ResetPassword","ProfileView","EditProfileView","PostView","EditPostView","LikeView","PdfPreviewView","FollowView","DashboardView","UsersListView","UserCreateView","UserEditView","PostsListView","visitorRoutes","path","name","component","meta","requiresAuth","requiresAdmin","onlyVisitor","userRoutes","props","adminRoutes","routes","router","history","beforeEach","to","from","next","token","localStorage","getItem","console","log"],"sources":["D:/Downloads/BookSharing_SocialNetwork/fronvue/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\r\nimport HomeView from \"../views/home_view.vue\";\r\nimport LoginView from '../views/login_view.vue';\r\nimport RegisterView from '../views/register_view.vue';\r\nimport ForgotPassword from \"../views/forgotpassword_view.vue\";\r\nimport ResetPassword from \"../views/resetpassword_view.vue\";\r\nimport ProfileView from \"../views/profile_view.vue\";\r\nimport EditProfileView from \"../views/editprofile_view.vue\";\r\nimport PostView from \"../views/post_view.vue\";\r\nimport EditPostView from \"../views/editpost_view.vue\";\r\nimport LikeView from \"../views/like_view.vue\";\r\nimport PdfPreviewView from \"../views/pdfpreview_view.vue\";\r\nimport FollowView from \"../views/follow_view.vue\";\r\nimport DashboardView from '../views/admin/dashboard_view.vue';\r\nimport UsersListView from '../views/admin/users-list_view.vue';\r\nimport UserCreateView from '../views/admin/user-create_view.vue';\r\nimport UserEditView from '../views/admin/user-edit_view.vue';\r\nimport PostsListView from '../views/admin/posts_list_view.vue';\r\n\r\n// Rutas para visitantes (no autenticados)\r\nconst visitorRoutes = [\r\n  {\r\n    path: '/login',\r\n    name: 'Login',\r\n    component: LoginView,\r\n    meta: { requiresAuth: false, requiresAdmin: false, onlyVisitor: true }\r\n  },\r\n  {\r\n    path: '/register',\r\n    name: 'Register',\r\n    component: RegisterView,\r\n    meta: { requiresAuth: false, requiresAdmin: false, onlyVisitor: true }\r\n  },\r\n  {\r\n    path: '/forgot-password',\r\n    name: 'ForgotPassword',\r\n    component: ForgotPassword,\r\n    meta: { requiresAuth: false, requiresAdmin: false, onlyVisitor: true }\r\n  },\r\n  {\r\n    path: '/reset-password',\r\n    name: 'ResetPassword',\r\n    component: ResetPassword,\r\n    meta: { requiresAuth: false, requiresAdmin: false, onlyVisitor: true }\r\n  }\r\n];\r\n\r\n// Rutas para usuarios autenticados (no admin)\r\nconst userRoutes = [\r\n  {\r\n    path: '/',\r\n    name: 'Home',\r\n    component: HomeView,\r\n    meta: { requiresAuth: true, requiresAdmin: false }\r\n  },\r\n  {\r\n    path: '/profile/:username',\r\n    name: 'Profile',\r\n    component: ProfileView,\r\n    meta: { requiresAuth: true, requiresAdmin: false },\r\n    props: true\r\n  },\r\n  {\r\n    path: '/profile/:username/edit-account',\r\n    name: 'EditProfile',\r\n    component: EditProfileView,\r\n    meta: { requiresAuth: true, requiresAdmin: false },\r\n    props: true\r\n  },\r\n  {\r\n    path: '/posts',\r\n    name: 'PostView',\r\n    component: PostView,\r\n    meta: { requiresAuth: true, requiresAdmin: false }\r\n  },\r\n  {\r\n    path: '/posts/:postId/edit-post',\r\n    name: 'EditPost',\r\n    component: EditPostView,\r\n    meta: { requiresAuth: true, requiresAdmin: false },\r\n    props: true\r\n  },\r\n  {\r\n    path: '/pdf-preview',\r\n    name: 'PdfPreview',\r\n    component: PdfPreviewView,\r\n    meta: { requiresAuth: true, requiresAdmin: false }\r\n  },\r\n  {\r\n    path: '/likes',\r\n    name: 'LikeView',\r\n    component: LikeView,\r\n    meta: { requiresAuth: true, requiresAdmin: false }\r\n  },\r\n  {\r\n    path: '/follow',\r\n    name: 'FollowView',\r\n    component: FollowView,\r\n    meta: { requiresAuth: true, requiresAdmin: false }\r\n  }\r\n];\r\n\r\n// Rutas para administradores\r\nconst adminRoutes = [\r\n  {\r\n    path: '/admin/dashboard',\r\n    name: 'Dashboard',\r\n    component: DashboardView,\r\n    meta: { requiresAuth: true, requiresAdmin: true }\r\n  },\r\n  {\r\n    path: '/admin/users-list',\r\n    name: 'UsersList',\r\n    component: UsersListView,\r\n    meta: { requiresAuth: true, requiresAdmin: true }\r\n  },\r\n  {\r\n    path: '/admin/user-create',\r\n    name: 'UserCreate',\r\n    component: UserCreateView,\r\n    meta: { requiresAuth: true, requiresAdmin: true }\r\n  },\r\n  {\r\n    path: '/admin/user-edit/:userId',\r\n    name: 'UserEdit',\r\n    component: UserEditView,\r\n    meta: { requiresAuth: true, requiresAdmin: true },\r\n    props: true\r\n  },\r\n  // post\r\n  {\r\n    path: '/admin/posts-list',\r\n    name: 'PostsList',\r\n    component: PostsListView,\r\n    meta: { requiresAuth: true, requiresAdmin: true }\r\n  },\r\n\r\n];\r\n\r\n// Unimos todas las rutas\r\nconst routes = [\r\n  ...visitorRoutes,\r\n  ...userRoutes,\r\n  ...adminRoutes,\r\n  // Redirección por defecto\r\n  // { path: '/:pathMatch(.*)*', redirect: '/' }\r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(),\r\n  routes\r\n});\r\n\r\n// Aquí puedes mejorar el guard para usar los meta correctamente\r\nrouter.beforeEach((to, from, next) => {\r\n  const token = localStorage.getItem('authToken');\r\n  console.log('Token:', token);\r\n  // Aquí puedes decodificar el token y verificar roles si lo necesitas\r\n\r\n  // Solo visitantes\r\n  // if (to.meta.onlyVisitor && token) {\r\n  //   return next({ name: 'Home' });\r\n  // }\r\n\r\n  // Rutas que requieren autenticación\r\n  if (to.meta.requiresAuth && !token) {\r\n    return next({ name: 'Login' });\r\n  }\r\n\r\n  // Rutas que requieren admin\r\n  if (to.meta.requiresAdmin) {\r\n    // Aquí deberías verificar si el usuario es admin (por ejemplo, decodificando el token)\r\n    // Si no es admin, redirige a Home\r\n    // Ejemplo:\r\n    // if (!decoded.isAdmin) return next({ name: 'Home' });\r\n  }\r\n\r\n  next();\r\n});\r\n\r\nexport default router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}