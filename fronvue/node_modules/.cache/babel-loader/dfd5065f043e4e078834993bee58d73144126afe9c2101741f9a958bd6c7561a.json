{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiClient from '@/services/ApiService';\nexport default {\n  data() {\n    return {\n      profileData: {\n        name: '',\n        birthdate: '',\n        gender: '',\n        description: '',\n        profile_picture: ''\n      },\n      isCurrentUser: false,\n      publications: 0,\n      followers: 0,\n      following: 0,\n      posts: []\n    };\n  },\n  computed: {\n    formattedBirthdate() {\n      if (this.profileData.birthdate) {\n        const date = new Date(this.profileData.birthdate);\n        return date.toLocaleDateString();\n      }\n      return '';\n    },\n    filteredPosts() {\n      return this.posts.filter(post => post.username === this.profileData.username);\n    }\n  },\n  // watch: {\n  //   '$route'() {\n  //     this.getProfile();\n  //     this.getAllPosts();\n  //   }\n  // },\n  methods: {\n    async getProfile() {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        try {\n          const response = await apiClient.get(`/profile/${this.$route.params.username}`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          this.profileData = response.data.user;\n          this.isCurrentUser = response.data.isCurrentUser;\n\n          // Guardar datos en localStorage si es el usuario actual\n          if (this.isCurrentUser) {\n            localStorage.setItem('profileData', JSON.stringify(this.profileData));\n          }\n\n          // Llamar a getAllPosts después de obtener el perfil para cargar publicaciones del usuario\n          this.getAllPosts(this.profileData.username);\n        } catch (error) {\n          console.error(\"Error fetching profile:\", error);\n        }\n      }\n    },\n    getProfileImage() {\n      const staticFiles = \"http://localhost:4000/api/upload/profile\";\n      return this.profileData.profile_picture ? this.profileData.profile_picture : staticFiles + \"default.jpg\";\n    },\n    async getAllPosts(username) {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await apiClient.get(`/posts/user/${username}`, {\n          // Ajusta la URL si es necesario\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.posts = response.data;\n        console.log(this.posts);\n      } catch (error) {\n        console.error('Error getting posts:', error);\n      }\n    },\n    // Método para manejar la creación de una nueva publicación\n    addNewPost() {\n      this.$router.push('/posts');\n    }\n  },\n  mounted() {\n    this.getProfile();\n    this.getAllPosts();\n  }\n};","map":{"version":3,"names":["apiClient","data","profileData","name","birthdate","gender","description","profile_picture","isCurrentUser","publications","followers","following","posts","computed","formattedBirthdate","date","Date","toLocaleDateString","filteredPosts","filter","post","username","methods","getProfile","token","localStorage","getItem","response","get","$route","params","headers","Authorization","user","setItem","JSON","stringify","getAllPosts","error","console","getProfileImage","staticFiles","log","addNewPost","$router","push","mounted"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\profile_component.vue"],"sourcesContent":["<template>\r\n  <div class=\"profile-container container my-4 py-4\" v-if=\"profileData\">\r\n    <div class=\"profile-header row align-items-center\">\r\n      <div class=\"col-md-3 text-center\">\r\n        <img :src=\"getProfileImage()\" class=\"profile-image img-fluid rounded-circle border\" alt=\"Profile Picture\" />\r\n      </div>\r\n      <div class=\"col-md-9 profile-info\">\r\n        <h1 class=\"h3\">{{ profileData.name }}</h1>\r\n        <p class=\"text-muted\"><strong>{{ profileData.username || 'No disponible' }}</strong></p>\r\n        <div class=\"profile-stats d-flex justify-content-between my-3\">\r\n          <span><strong>{{ publications }}</strong> publicaciones</span>\r\n          <span><strong>{{ followers }}</strong> seguidores</span>\r\n          <span><strong>{{ following }}</strong> seguidos</span>\r\n        </div>\r\n        <p v-if=\"profileData.description\">{{ profileData.description }}</p>\r\n        <router-link v-if=\"isCurrentUser\" :to=\"`/profile/${profileData.username}/edit-account`\" class=\"btn btn-primary btn-block\">\r\n          Editar perfil\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Contenedor para las publicaciones -->\r\n    <div class=\"posts-container\">\r\n      <div v-for=\"post in posts\" :key=\"post.id\" class=\"post-card mb-4 shadow-sm\">\r\n        <div class=\"d-flex align-items-start\">\r\n          <img v-if=\"post.image\" :src=\"post.image\" alt=\"Post Image\" class=\"post-image me-3\" />\r\n          <div class=\"post-content\">\r\n            <h3 class=\"post-title\">{{ post.title }}</h3>\r\n            <p class=\"post-description\">{{ post.description }}</p>\r\n            <div class=\"d-flex justify-content-between align-items-center\">\r\n              <a v-if=\"post.pdf_file\" :href=\"post.pdf_file\" target=\"_blank\" class=\"btn btn-primary\">\r\n                📄 Ver libro (PDF)\r\n              </a>\r\n              <button @click=\"likePost(post.id)\" class=\"btn btn-success\">\r\n                👍 Like ({{ post.likes_count || 0 }})\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport apiClient from '@/services/ApiService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      profileData: {\r\n        name: '',\r\n        birthdate: '',\r\n        gender: '',\r\n        description: '',\r\n        profile_picture: ''\r\n      },\r\n      isCurrentUser: false,\r\n      publications: 0,\r\n      followers: 0,\r\n      following: 0,\r\n      posts: [],\r\n    };\r\n  },\r\n  computed: {\r\n    formattedBirthdate() {\r\n      if (this.profileData.birthdate) {\r\n        const date = new Date(this.profileData.birthdate);\r\n        return date.toLocaleDateString();\r\n      }\r\n      return '';\r\n    },\r\n    filteredPosts() {\r\n      return this.posts.filter(post => post.username === this.profileData.username);\r\n    }\r\n  },\r\n  // watch: {\r\n  //   '$route'() {\r\n  //     this.getProfile();\r\n  //     this.getAllPosts();\r\n  //   }\r\n  // },\r\n  methods: {\r\n    async getProfile() {\r\n      const token = localStorage.getItem('authToken');\r\n      if (token) {\r\n        try {\r\n          const response = await apiClient.get(`/profile/${this.$route.params.username}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`\r\n            }\r\n          });\r\n          this.profileData = response.data.user;\r\n          this.isCurrentUser = response.data.isCurrentUser;\r\n\r\n          // Guardar datos en localStorage si es el usuario actual\r\n          if (this.isCurrentUser) {\r\n            localStorage.setItem('profileData', JSON.stringify(this.profileData));\r\n          }\r\n\r\n          // Llamar a getAllPosts después de obtener el perfil para cargar publicaciones del usuario\r\n          this.getAllPosts(this.profileData.username);\r\n        } catch (error) {\r\n          console.error(\"Error fetching profile:\", error);\r\n        }\r\n      }\r\n    },\r\n    getProfileImage() {\r\n      const staticFiles = \"http://localhost:4000/api/upload/profile\";\r\n      return this.profileData.profile_picture\r\n        ? this.profileData.profile_picture\r\n        : staticFiles + \"default.jpg\";\r\n    },\r\n    async getAllPosts(username) {\r\n      try {\r\n        const token = localStorage.getItem('authToken');\r\n        const response = await apiClient.get(`/posts/user/${username}`, { // Ajusta la URL si es necesario\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n        this.posts = response.data;\r\n        console.log(this.posts);\r\n      } catch (error) {\r\n        console.error('Error getting posts:', error);\r\n      }\r\n    },\r\n    // Método para manejar la creación de una nueva publicación\r\n    addNewPost() {\r\n      this.$router.push('/posts');\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.getProfile();\r\n    this.getAllPosts();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.profile-container {\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.profile-header {\r\n  display: flex;\r\n}\r\n\r\n.profile-image {\r\n  width: 150px;\r\n  height: 150px;\r\n}\r\n\r\n.profile-info h1 {\r\n  font-size: 1.75rem;\r\n}\r\n\r\n.profile-stats {\r\n  font-size: 1rem;\r\n}\r\n\r\n.add-post-button .btn {\r\n  font-size: 1.5rem;\r\n  width: 50px;\r\n  height: 50px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.posts-container {\r\n  margin-top: 20px;\r\n}\r\n\r\n.post-card {\r\n  display: flex;\r\n  padding: 15px;\r\n  border-radius: 10px;\r\n  background-color: #fff;\r\n  transition: box-shadow 0.3s, transform 0.3s;\r\n  border: 1px solid #ddd; /* Añadir un borde */\r\n}\r\n\r\n.post-card:hover {\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n  transform: translateY(-5px); /* Efecto de elevación */\r\n}\r\n\r\n.post-image {\r\n  width: 150px; /* Tamaño más grande para la imagen */\r\n  height: 150px; /* Tamaño más grande para la imagen */\r\n  object-fit: cover; /* Mantiene la relación de aspecto */\r\n  border-radius: 10px; /* Bordes redondeados */\r\n}\r\n\r\n.post-content {\r\n  flex: 1; /* Hace que el contenido ocupe el espacio restante */\r\n  margin-left: 15px; /* Espaciado entre la imagen y el contenido */\r\n}\r\n\r\n.post-title {\r\n  font-size: 1.5rem;\r\n  margin: 0.5rem 0;\r\n  color: #333; /* Color del título */\r\n}\r\n\r\n.post-description {\r\n  margin: 0.5rem 0;\r\n  color: #666; /* Color más suave para la descripción */\r\n}\r\n\r\n.btn-primary, .btn-success {\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background-color: #0056b3; /* Cambiar el color en hover */\r\n}\r\n\r\n.btn-success:hover {\r\n  background-color: #45a049; /* Cambiar el color en hover */\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .profile-header {\r\n    flex-direction: column;\r\n    text-align: center;\r\n  }\r\n\r\n  .profile-image {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .profile-info {\r\n    text-align: center;\r\n  }\r\n\r\n  .profile-stats {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n\r\n  .post-card {\r\n    flex-direction: column; /* Cambiar a columna en dispositivos más pequeños */\r\n    align-items: center;\r\n  }\r\n\r\n  .post-image {\r\n    margin-bottom: 10px; /* Espaciado entre imagen y contenido */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}