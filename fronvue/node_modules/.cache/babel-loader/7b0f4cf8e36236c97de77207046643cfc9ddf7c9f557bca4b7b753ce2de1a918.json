{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_MainLayout = _resolveComponent(\"MainLayout\");\n  return _openBlock(), _createBlock(_component_MainLayout);\n}","map":{"version":3,"names":["_createBlock","_component_MainLayout"],"sources":["D:\\Downloads\\BookSharing_SocialNetwork\\fronvue\\src\\views\\post_view.vue"],"sourcesContent":["<template>\r\n  <MainLayout>\r\n  \r\n  </MainLayout>\r\n</template>\r\n\r\n<script>\r\nimport MainLayout from \"@/layouts/MainLayout.vue\";\r\nimport apiClient from \"../services/ApiService.js\";\r\nimport PdfPreview from \"@/components/pdfpreview_component.vue\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      categories: [],\r\n      post: {\r\n        id: null,\r\n        title: \"\",\r\n        description: \"\",\r\n        user_id: null,\r\n        image: \"\",\r\n        pdf_file: \"\",\r\n        created_at: \"\",\r\n        updated_at: \"\",\r\n        views: 0,\r\n        category_id: null,\r\n        username: \"\",\r\n      },\r\n      loading: true,\r\n      error: null,\r\n    };\r\n  },\r\n  async beforeMount() {\r\n    try {\r\n      this.post.id = this.$route.params.postId;\r\n      if (this.post.id == null || this.post.id == undefined) {\r\n        this.error = \"No se pudo cargar la informaci칩n del libro.\";\r\n        return;\r\n      }\r\n\r\n      const response = await apiClient.get(\r\n        `/posts/${this.$route.params.postId}`\r\n      );\r\n      // formatea en espa침ol 2025-05-19T16:53:10.117Z a una fecha legible\r\n      const date = new Date(response.data.created_at);\r\n      const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n      const formattedDate = date.toLocaleDateString(\"es-ES\", options);\r\n      this.post = response.data;\r\n      this.post.created_at = formattedDate;\r\n      // this.loading = false;\r\n    } catch (err) {\r\n      this.error = \"No se pudo cargar la informaci칩n del libro.\";\r\n      this.loading = false;\r\n    }\r\n    // consultar todas las categorias\r\n    // token\r\n    try {\r\n      const res = await apiClient.get(\"/admin/categories\", {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\r\n        },\r\n      });\r\n      this.categories = res.data;\r\n    } catch (err) {\r\n      this.error = \"No se pudo cargar la informaci칩n de las categorias.\";\r\n    }\r\n  },\r\n  components: { MainLayout, PdfPreview },\r\n};\r\n</script>\r\n"],"mappings":";;;uBACEA,YAAA,CAEaC,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}