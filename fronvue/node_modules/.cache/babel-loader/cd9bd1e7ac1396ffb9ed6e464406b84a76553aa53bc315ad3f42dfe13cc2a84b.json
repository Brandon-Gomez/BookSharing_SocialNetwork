{"ast":null,"code":"import ApiService from \"@/services/ApiService\";\nexport default {\n  data() {\n    return {\n      newPassword: \"\",\n      confirmPassword: \"\",\n      message: \"\"\n    };\n  },\n  methods: {\n    async resetPassword() {\n      if (this.newPassword !== this.confirmPassword) {\n        this.message = \"Las contraseñas no coinciden.\";\n        return;\n      }\n      const token = this.$route.query.token; // Obtener el token de los parámetros de la URL\n      try {\n        const response = await ApiService.post(\"/reset-password\", {\n          token: token,\n          newPassword: this.newPassword\n        });\n        this.message = response.data.message;\n      } catch (error) {\n        this.message = error.response.data.error || \"Error al restablecer la contraseña.\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["ApiService","data","newPassword","confirmPassword","message","methods","resetPassword","token","$route","query","response","post","error"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\resetpassword_component.vue"],"sourcesContent":["<template>\r\n    <div class=\"reset-password\">\r\n      <h2>Restablecer Contraseña</h2>\r\n      <form @submit.prevent=\"resetPassword\">\r\n        <div>\r\n          <label for=\"newPassword\">Nueva Contraseña</label>\r\n          <input type=\"password\" v-model=\"newPassword\" id=\"newPassword\" required />\r\n        </div>\r\n        <div>\r\n          <label for=\"confirmPassword\">Confirmar Contraseña</label>\r\n          <input type=\"password\" v-model=\"confirmPassword\" id=\"confirmPassword\" required />\r\n        </div>\r\n        <button type=\"submit\">Restablecer Contraseña</button>\r\n      </form>\r\n      <div v-if=\"message\" class=\"message\">{{ message }}</div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import ApiService from \"@/services/ApiService\";\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        newPassword: \"\",\r\n        confirmPassword: \"\",\r\n        message: \"\",\r\n      };\r\n    },\r\n    methods: {\r\n      async resetPassword() {\r\n        if (this.newPassword !== this.confirmPassword) {\r\n          this.message = \"Las contraseñas no coinciden.\";\r\n          return;\r\n        }\r\n        \r\n        const token = this.$route.query.token; // Obtener el token de los parámetros de la URL\r\n        try {\r\n          const response = await ApiService.post(\"/reset-password\", {\r\n            token: token,\r\n            newPassword: this.newPassword,\r\n          });\r\n          this.message = response.data.message;\r\n        } catch (error) {\r\n          this.message = error.response.data.error || \"Error al restablecer la contraseña.\";\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .reset-password {\r\n    max-width: 400px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAmBE,OAAOA,UAAS,MAAO,uBAAuB;AAE9C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,eAAe,EAAE,EAAE;MACnBC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,aAAaA,CAAA,EAAG;MACpB,IAAI,IAAI,CAACJ,WAAU,KAAM,IAAI,CAACC,eAAe,EAAE;QAC7C,IAAI,CAACC,OAAM,GAAI,+BAA+B;QAC9C;MACF;MAEA,MAAMG,KAAI,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,KAAK,EAAE;MACvC,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMV,UAAU,CAACW,IAAI,CAAC,iBAAiB,EAAE;UACxDJ,KAAK,EAAEA,KAAK;UACZL,WAAW,EAAE,IAAI,CAACA;QACpB,CAAC,CAAC;QACF,IAAI,CAACE,OAAM,GAAIM,QAAQ,CAACT,IAAI,CAACG,OAAO;MACtC,EAAE,OAAOQ,KAAK,EAAE;QACd,IAAI,CAACR,OAAM,GAAIQ,KAAK,CAACF,QAAQ,CAACT,IAAI,CAACW,KAAI,IAAK,qCAAqC;MACnF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}