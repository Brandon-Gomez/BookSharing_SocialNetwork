{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    postId: String\n  },\n  data() {\n    return {\n      post: {\n        title: '',\n        description: ''\n      },\n      newImageFile: null,\n      newPdfFile: null\n    };\n  },\n  mounted() {\n    this.loadPostFromLocalStorage();\n  },\n  methods: {\n    loadPostFromLocalStorage() {\n      // Cargar la publicación desde localStorage usando el postId como clave\n      const storedPost = localStorage.getItem(`post_${this.postId}`);\n      if (storedPost) {\n        this.post = JSON.parse(storedPost);\n      } else {\n        console.error('No se encontró la publicación en localStorage.');\n      }\n    },\n    handleImageUpload(event) {\n      this.newImageFile = event.target.files[0];\n    },\n    handlePdfUpload(event) {\n      this.newPdfFile = event.target.files[0];\n    },\n    async updatePost() {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        const formData = new FormData();\n\n        // Se asegura de que siempre se use el título y la descripción del objeto post\n        formData.append('title', this.post.title);\n        formData.append('description', this.post.description);\n\n        // Agrega los nuevos archivos solo si existen\n        if (this.newImageFile) formData.append('images', this.newImageFile);\n        if (this.newPdfFile) formData.append('pdf_file', this.newPdfFile);\n        try {\n          // Aquí podrías realizar una solicitud PUT si es necesario\n          const response = await apiClient.put(`/posts/${this.postId}`, formData, {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          console.log(response.data);\n\n          // Actualiza el post en localStorage\n          localStorage.setItem(`post_${this.postId}`, JSON.stringify(this.post));\n\n          // Redirecciona después de la actualización exitosa\n          this.$router.push(`/profile/${this.$route.params.username}`);\n        } catch (error) {\n          console.error('Error updating post:', error);\n        }\n      }\n    },\n    async deletePost() {\n      // Eliminar el post del localStorage\n      localStorage.removeItem(`post_${this.postId}`);\n      this.$router.push(`/profile/${this.$route.params.username}`);\n    }\n  }\n};","map":{"version":3,"names":["props","postId","String","data","post","title","description","newImageFile","newPdfFile","mounted","loadPostFromLocalStorage","methods","storedPost","localStorage","getItem","JSON","parse","console","error","handleImageUpload","event","target","files","handlePdfUpload","updatePost","token","formData","FormData","append","response","apiClient","put","headers","Authorization","log","setItem","stringify","$router","push","$route","params","username","deletePost","removeItem"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\editpost_component.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"post\" class=\"edit-post-container container my-4 py-4\">\r\n    <h2>Editar Publicación</h2>\r\n    <form @submit.prevent=\"updatePost\">\r\n      <div class=\"form-group my-2\">\r\n        <label for=\"title\">Título</label>\r\n        <input type=\"text\" id=\"title\" v-model=\"post.title\" class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"form-group my-2\">\r\n        <label for=\"description\">Descripción</label>\r\n        <textarea id=\"description\" v-model=\"post.description\" class=\"form-control\"></textarea>\r\n      </div>\r\n\r\n      <div class=\"form-group my-2\">\r\n        <label for=\"image\">Imagen</label>\r\n        <input type=\"file\" id=\"image\" @change=\"handleImageUpload\" class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"form-group my-2\">\r\n        <label for=\"pdf\">Archivo PDF</label>\r\n        <input type=\"file\" id=\"pdf\" @change=\"handlePdfUpload\" class=\"form-control\" />\r\n      </div>\r\n\r\n      <button type=\"submit\" class=\"btn btn-primary\">Guardar Cambios</button>\r\n      <button @click.prevent=\"deletePost\" class=\"btn btn-danger ml-2\">Eliminar Publicación</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    postId: String, \r\n  },\r\n  data() {\r\n    return {\r\n      post: { \r\n        title: '',\r\n        description: '',\r\n      },\r\n      newImageFile: null,\r\n      newPdfFile: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadPostFromLocalStorage();\r\n  },\r\n  methods: {\r\n    loadPostFromLocalStorage() {\r\n      // Cargar la publicación desde localStorage usando el postId como clave\r\n      const storedPost = localStorage.getItem(`post_${this.postId}`);\r\n      if (storedPost) {\r\n        this.post = JSON.parse(storedPost);\r\n      } else {\r\n        console.error('No se encontró la publicación en localStorage.');\r\n      }\r\n    },\r\n    handleImageUpload(event) {\r\n      this.newImageFile = event.target.files[0];\r\n    },\r\n    handlePdfUpload(event) {\r\n      this.newPdfFile = event.target.files[0];\r\n    },\r\n    async updatePost() {\r\n      const token = localStorage.getItem('authToken');\r\n      if (token) {\r\n        const formData = new FormData();\r\n\r\n        // Se asegura de que siempre se use el título y la descripción del objeto post\r\n        formData.append('title', this.post.title);\r\n        formData.append('description', this.post.description);\r\n\r\n        // Agrega los nuevos archivos solo si existen\r\n        if (this.newImageFile) formData.append('images', this.newImageFile);\r\n        if (this.newPdfFile) formData.append('pdf_file', this.newPdfFile);\r\n\r\n        try {\r\n          // Aquí podrías realizar una solicitud PUT si es necesario\r\n          const response = await apiClient.put(`/posts/${this.postId}`, formData, {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              'Content-Type': 'multipart/form-data',\r\n            },\r\n          });\r\n          console.log(response.data);\r\n\r\n          // Actualiza el post en localStorage\r\n          localStorage.setItem(`post_${this.postId}`, JSON.stringify(this.post));\r\n\r\n          // Redirecciona después de la actualización exitosa\r\n          this.$router.push(`/profile/${this.$route.params.username}`);\r\n        } catch (error) {\r\n          console.error('Error updating post:', error);\r\n        }\r\n      }\r\n    },\r\n    async deletePost() {\r\n      // Eliminar el post del localStorage\r\n      localStorage.removeItem(`post_${this.postId}`);\r\n      this.$router.push(`/profile/${this.$route.params.username}`);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n  \r\n  <style scoped>\r\n  .edit-post-container {\r\n    background-color: #ffffff;\r\n    padding: 20px;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}