{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"like-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $data.isLiked !== null ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Esperamos a que isLiked est√© definido \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleLike && $options.toggleLike(...args)),\n    class: _normalizeClass({\n      liked: $data.isLiked\n    })\n  }, [_createElementVNode(\"span\", null, _toDisplayString($data.isLiked ? '‚ù§Ô∏è' : 'ü§ç'), 1 /* TEXT */)], 2 /* CLASS */), _createElementVNode(\"span\", null, _toDisplayString($data.likeCount) + \" Me gusta\", 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["key","class","$data","isLiked","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","onClick","_cache","args","$options","toggleLike","_normalizeClass","liked","_toDisplayString","likeCount"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\like_component.vue"],"sourcesContent":["<template>\r\n  <div class=\"like-container\" v-if=\"isLiked !== null\">  <!-- Esperamos a que isLiked est√© definido -->\r\n    <button @click=\"toggleLike\" :class=\"{ liked: isLiked }\">\r\n      <span>{{ isLiked ? '‚ù§Ô∏è' : 'ü§ç' }}</span>\r\n    </button>\r\n    <span>{{ likeCount }} Me gusta</span>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport apiClient from \"@/services/ApiService\";\r\n\r\nexport default {\r\n  props: {\r\n    postId: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      isLiked: null, // Cambiar a null para evitar un valor inicial incorrecto\r\n      likeCount: 0,\r\n    };\r\n  },\r\n  async created() {\r\n    try {\r\n      await this.fetchLikeCount();\r\n      await this.checkIfLiked();\r\n    } catch (error) {\r\n      console.error(\"Error during initialization:\", error);\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchLikeCount() {\r\n      try {\r\n        const response = await apiClient.get(`/like/count/${this.postId}`);\r\n        this.likeCount = response.data.likeCount;\r\n      } catch (error) {\r\n        console.error(\"Error fetching like count:\", error);\r\n      }\r\n    },\r\n    async toggleLike() {\r\n      const token = localStorage.getItem(\"authToken\");\r\n      if (!token) {\r\n        console.error(\"Authentication token not found\");\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        if (this.isLiked) {\r\n          // Quitar \"like\"\r\n          await apiClient.delete(`/like/${this.postId}`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            data: { postId: this.postId },\r\n          });\r\n          this.likeCount--;\r\n          this.isLiked = false;\r\n        } else {\r\n          // Agregar \"like\"\r\n          await apiClient.post(\r\n            `/like`,\r\n            { postId: this.postId },\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          this.likeCount++;\r\n          this.isLiked = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error toggling like:\", error);\r\n      }\r\n    },\r\n    async checkIfLiked() {\r\n    //   const token = localStorage.getItem(\"authToken\");\r\n    //   if (!token) {\r\n    //     console.error(\"Authentication token not found\");\r\n    //     return;\r\n    //   }\r\n\r\n      try {\r\n        const response = await apiClient.get(`/like/check/${this.postId}`);\r\n        this.isLiked = response.data.isLiked;  // Establecemos el valor de isLiked con la respuesta de la API\r\n      } catch (error) {\r\n        console.error(\"Error checking if liked:\", error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n  \r\n  <style scoped>\r\n  .like-container {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .like-container button.liked {\r\n  color: red; /* Cambia el color del √≠cono cuando el like est√° activo */\r\n}\r\n\r\n  button {\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: 1.5em;\r\n  }\r\n  button.liked {\r\n    color: red;\r\n  }\r\n  span {\r\n    margin-left: 0.5em;\r\n  }\r\n  </style>\r\n  "],"mappings":";;EAAAA,GAAA;EACOC,KAAK,EAAC;;;SAAuBC,KAAA,CAAAC,OAAO,a,cAAzCC,mBAAA,CAKM,OALNC,UAKM,GALgDC,mBAAA,2CAA8C,EAClGC,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;IAAGT,KAAK,EAFtCY,eAAA;MAAAC,KAAA,EAEiDZ,KAAA,CAAAC;IAAO;MAClDI,mBAAA,CAAwC,cAAAQ,gBAAA,CAA/Bb,KAAA,CAAAC,OAAO,+B,kBAElBI,mBAAA,CAAqC,cAAAQ,gBAAA,CAA5Bb,KAAA,CAAAc,SAAS,IAAG,WAAS,gB,KALlCV,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}