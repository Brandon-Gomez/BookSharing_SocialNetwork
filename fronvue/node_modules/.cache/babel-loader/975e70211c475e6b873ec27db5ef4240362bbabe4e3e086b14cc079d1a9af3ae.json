{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiClient from '@/services/ApiService';\nexport default {\n  data() {\n    return {\n      newPost: {\n        description: '',\n        image: null,\n        pdf: null\n      },\n      posts: [],\n      newComment: ''\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.newPost.image = event.target.files[0]; // Asigna la imagen\n    },\n    onPdfChange(event) {\n      this.newPost.pdf = event.target.files[0]; // Asigna el PDF\n    },\n    async createPost() {\n      try {\n        const formData = new FormData();\n        formData.append('userId', this.$store.state.userId); // Asegúrate de enviar el userId del usuario logueado\n        formData.append('description', this.newPost.description);\n        formData.append('photo', this.newPost.image);\n        formData.append('book', this.newPost.pdf);\n\n        // Realizamos la solicitud POST al backend\n        const response = await apiClient('/posts', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        this.posts.push(response.data); // Agregamos la nueva publicación a la lista\n        this.newPost.description = '';\n        this.newPost.image = null;\n        this.newPost.pdf = null;\n      } catch (error) {\n        console.error('Error creating post:', error);\n      }\n    },\n    async loadPosts() {\n      const response = await apiClient('/posts');\n      this.posts = response.data;\n    },\n    async likePost(postId) {\n      await apiClient(`/api/posts/${postId}/like`, {\n        userId: this.$store.state.userId // Asegúrate de pasar el userId\n      });\n      this.loadPosts(); // Actualiza la lista de posts\n    },\n    async addComment(postId) {\n      if (this.newComment.trim()) {\n        await apiClient(`/api/posts/${postId}/comment`, {\n          userId: this.$store.state.userId,\n          comment: this.newComment\n        });\n        this.newComment = '';\n        this.loadPosts(); // Recargar los posts con los nuevos comentarios\n      }\n    }\n  },\n  mounted() {\n    this.loadPosts(); // Cargar publicaciones al montar el componente\n  }\n};","map":{"version":3,"names":["apiClient","data","newPost","description","image","pdf","posts","newComment","methods","onFileChange","event","target","files","onPdfChange","createPost","formData","FormData","append","$store","state","userId","response","headers","push","error","console","loadPosts","likePost","postId","addComment","trim","comment","mounted"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\post_component.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Create a New Post</h2>\r\n      <form @submit.prevent=\"createPost\">\r\n        <div>\r\n          <label for=\"description\">Description:</label>\r\n          <textarea v-model=\"newPost.description\" required></textarea>\r\n        </div>\r\n        <div>\r\n          <label for=\"photo\">Upload Photo:</label>\r\n          <input type=\"file\" @change=\"onFileChange\" required />\r\n        </div>\r\n        <div>\r\n          <label for=\"book\">Upload Book (PDF):</label>\r\n          <input type=\"file\" @change=\"onPdfChange\" required />\r\n        </div>\r\n        <button type=\"submit\">Post</button>\r\n      </form>\r\n  \r\n      <h2>All Posts</h2>\r\n      <div v-for=\"post in posts\" :key=\"post.id\" class=\"post\">\r\n        <h3>{{ post.username }}</h3>\r\n        <p>{{ post.description }}</p>\r\n        <img :src=\"`/uploads/photos/${post.photo_url}`\" alt=\"Post Image\" v-if=\"post.photo_url\" />\r\n        <a :href=\"`/uploads/book/${post.book_url}`\" target=\"_blank\">View Book (PDF)</a>\r\n        <div>\r\n          <button @click=\"likePost(post.id)\">Like ({{ post.likes_count }})</button>\r\n        </div>\r\n  \r\n        <h4>Comments:</h4>\r\n        <div v-for=\"comment in post.comments\" :key=\"comment.id\">\r\n          <p><strong>{{ comment.username }}:</strong> {{ comment.comment }}</p>\r\n        </div>\r\n        <div>\r\n          <input v-model=\"newComment\" placeholder=\"Add a comment\" />\r\n          <button @click=\"addComment(post.id)\">Comment</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n\r\n  import apiClient from '@/services/ApiService';\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        newPost: {\r\n          description: '',\r\n          image: null,\r\n          pdf: null,\r\n        },\r\n        posts: [],\r\n        newComment: '',\r\n      };\r\n    },\r\n    methods: {\r\n      onFileChange(event) {\r\n        this.newPost.image = event.target.files[0]; // Asigna la imagen\r\n      },\r\n      onPdfChange(event) {\r\n        this.newPost.pdf = event.target.files[0]; // Asigna el PDF\r\n      },\r\n      async createPost() {\r\n        try {\r\n          const formData = new FormData();\r\n          formData.append('userId', this.$store.state.userId); // Asegúrate de enviar el userId del usuario logueado\r\n          formData.append('description', this.newPost.description);\r\n          formData.append('photo', this.newPost.image);\r\n          formData.append('book', this.newPost.pdf);\r\n  \r\n          // Realizamos la solicitud POST al backend\r\n          const response = await apiClient('/posts', formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data',\r\n            },\r\n          });\r\n  \r\n          this.posts.push(response.data); // Agregamos la nueva publicación a la lista\r\n          this.newPost.description = '';\r\n          this.newPost.image = null;\r\n          this.newPost.pdf = null;\r\n        } catch (error) {\r\n          console.error('Error creating post:', error);\r\n        }\r\n      },\r\n      async loadPosts() {\r\n        const response = await apiClient('/posts');\r\n        this.posts = response.data;\r\n      },\r\n      async likePost(postId) {\r\n        await apiClient(`/api/posts/${postId}/like`, {\r\n          userId: this.$store.state.userId,  // Asegúrate de pasar el userId\r\n        });\r\n        this.loadPosts(); // Actualiza la lista de posts\r\n      },\r\n      async addComment(postId) {\r\n        if (this.newComment.trim()) {\r\n          await apiClient(`/api/posts/${postId}/comment`, {\r\n            userId: this.$store.state.userId,\r\n            comment: this.newComment,\r\n          });\r\n          this.newComment = '';\r\n          this.loadPosts(); // Recargar los posts con los nuevos comentarios\r\n        }\r\n      },\r\n    },\r\n    mounted() {\r\n      this.loadPosts(); // Cargar publicaciones al montar el componente\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Agrega estilo para mejorar la presentación */\r\n  .post {\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    margin-bottom: 20px;\r\n  }\r\n  </style>\r\n  "],"mappings":";AA2CE,OAAOA,SAAQ,MAAO,uBAAuB;AAE7C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;QACPC,WAAW,EAAE,EAAE;QACfC,KAAK,EAAE,IAAI;QACXC,GAAG,EAAE;MACP,CAAC;MACDC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAACC,KAAK,EAAE;MAClB,IAAI,CAACR,OAAO,CAACE,KAAI,GAAIM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;IAC9C,CAAC;IACDC,WAAWA,CAACH,KAAK,EAAE;MACjB,IAAI,CAACR,OAAO,CAACG,GAAE,GAAIK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;IAC5C,CAAC;IACD,MAAME,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,MAAM,CAAC,EAAE;QACrDL,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE,IAAI,CAACf,OAAO,CAACC,WAAW,CAAC;QACxDY,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACf,OAAO,CAACE,KAAK,CAAC;QAC5CW,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACf,OAAO,CAACG,GAAG,CAAC;;QAEzC;QACA,MAAMgB,QAAO,GAAI,MAAMrB,SAAS,CAAC,QAAQ,EAAEe,QAAQ,EAAE;UACnDO,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QAEF,IAAI,CAAChB,KAAK,CAACiB,IAAI,CAACF,QAAQ,CAACpB,IAAI,CAAC,EAAE;QAChC,IAAI,CAACC,OAAO,CAACC,WAAU,GAAI,EAAE;QAC7B,IAAI,CAACD,OAAO,CAACE,KAAI,GAAI,IAAI;QACzB,IAAI,CAACF,OAAO,CAACG,GAAE,GAAI,IAAI;MACzB,EAAE,OAAOmB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACD,MAAME,SAASA,CAAA,EAAG;MAChB,MAAML,QAAO,GAAI,MAAMrB,SAAS,CAAC,QAAQ,CAAC;MAC1C,IAAI,CAACM,KAAI,GAAIe,QAAQ,CAACpB,IAAI;IAC5B,CAAC;IACD,MAAM0B,QAAQA,CAACC,MAAM,EAAE;MACrB,MAAM5B,SAAS,CAAC,cAAc4B,MAAM,OAAO,EAAE;QAC3CR,MAAM,EAAE,IAAI,CAACF,MAAM,CAACC,KAAK,CAACC,MAAM,CAAG;MACrC,CAAC,CAAC;MACF,IAAI,CAACM,SAAS,CAAC,CAAC,EAAE;IACpB,CAAC;IACD,MAAMG,UAAUA,CAACD,MAAM,EAAE;MACvB,IAAI,IAAI,CAACrB,UAAU,CAACuB,IAAI,CAAC,CAAC,EAAE;QAC1B,MAAM9B,SAAS,CAAC,cAAc4B,MAAM,UAAU,EAAE;UAC9CR,MAAM,EAAE,IAAI,CAACF,MAAM,CAACC,KAAK,CAACC,MAAM;UAChCW,OAAO,EAAE,IAAI,CAACxB;QAChB,CAAC,CAAC;QACF,IAAI,CAACA,UAAS,GAAI,EAAE;QACpB,IAAI,CAACmB,SAAS,CAAC,CAAC,EAAE;MACpB;IACF;EACF,CAAC;EACDM,OAAOA,CAAA,EAAG;IACR,IAAI,CAACN,SAAS,CAAC,CAAC,EAAE;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}