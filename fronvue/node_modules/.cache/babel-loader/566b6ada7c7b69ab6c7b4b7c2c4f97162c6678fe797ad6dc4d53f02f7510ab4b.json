{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"follow-container\"\n};\nexport function render(_ctx, _cache) {\n  return _ctx.isFollowing !== null ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.toggleFollow && _ctx.toggleFollow(...args)),\n    class: _normalizeClass({\n      following: _ctx.isFollowing\n    })\n  }, [_createElementVNode(\"span\", null, _toDisplayString(_ctx.isFollowing ? \"Siguiendo\" : \"Seguir\"), 1 /* TEXT */)], 2 /* CLASS */), _createElementVNode(\"span\", null, _toDisplayString(_ctx.followerCount) + \" seguidores\", 1 /* TEXT */), _createElementVNode(\"span\", null, _toDisplayString(_ctx.followingCount) + \" seguidos\", 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["key","class","_ctx","isFollowing","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","toggleFollow","_normalizeClass","following","_toDisplayString","followerCount","followingCount","_createCommentVNode"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\follow_component.vue"],"sourcesContent":["<template>\r\n  <div class=\"follow-container\" v-if=\"isFollowing !== null\">\r\n    <button @click=\"toggleFollow\" :class=\"{ following: isFollowing }\">\r\n      <span>{{ isFollowing ? \"Siguiendo\" : \"Seguir\" }}</span>\r\n    </button>\r\n    <span>{{ followerCount }} seguidores</span>\r\n    <span>{{ followingCount }} seguidos</span>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport apiClient from \"@/services/ApiService\";\r\n\r\nexport default {\r\n  props: {\r\n    userId: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      isFollowing: null, // Indica si el usuario ya está siguiendo al otro usuario\r\n      followerCount: 0, // Cantidad de seguidores del usuario\r\n      followingCount: 0, \r\n    };\r\n  },\r\n  async created() {\r\n    try {\r\n      await this.fetchFollowerCount(); // Obtén la cantidad de seguidores\r\n      await this.fetchFollowingCount();\r\n      await this.checkIfFollowing(); // Verifica si el usuario actual ya está siguiendo al otro usuario\r\n    } catch (error) {\r\n      console.error(\"Error durante la inicialización:\", error);\r\n    }\r\n  },\r\n  methods: {\r\n    // Obtiene el contador de seguidores\r\n    async fetchFollowerCount() {\r\n      try {\r\n        const response = await apiClient.get(`/follow/followers/count/${this.userId}`);\r\n        this.followerCount = response.data.followerCount;\r\n      } catch (error) {\r\n        console.error(\"Error al obtener la cantidad de seguidores:\", error);\r\n      }\r\n    },\r\n    async fetchFollowingCount() {\r\n      try {\r\n        const response = await apiClient.get(`/follow/following/count/${this.userId}`);\r\n        this.followingCount = response.data.followingCount;\r\n      } catch (error) {\r\n        console.error(\"Error al obtener la cantidad de seguidores:\", error);\r\n      }\r\n    },\r\n    // Cambia el estado de seguir/no seguir\r\n    async toggleFollow() {\r\n  const token = localStorage.getItem(\"authToken\");\r\n  if (!token) {\r\n    console.error(\"Token de autenticación no encontrado\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    if (this.isFollowing) {\r\n      // Dejar de seguir\r\n      await apiClient.delete(`/follow/${this.userId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n        data: { followed_id: this.userId },\r\n      });\r\n      this.followerCount--;\r\n      this.isFollowing = false;\r\n    } else {\r\n      // Seguir\r\n      await apiClient.post(\r\n        `/follow`,\r\n        { followed_id: this.userId },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      this.followerCount++;\r\n      this.isFollowing = true;\r\n    }\r\n    this.$emit(\"update-followers\", this.followerCount); // Emite el evento con el nuevo conteo\r\n  } catch (error) {\r\n    console.error(\"Error al cambiar el estado de seguimiento:\", error);\r\n  }\r\n}\r\n\r\n    // Verifica si el usuario ya está siguiendo\r\n    async checkIfFollowing() {\r\n      const token = localStorage.getItem(\"authToken\");\r\n      if (!token) {\r\n        console.error(\"Token de autenticación no encontrado\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await apiClient.get(`/follow/check/${this.userId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        this.isFollowing = response.data.isFollowing;\r\n      } catch (error) {\r\n        console.error(\"Error al verificar el estado de seguimiento:\", error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.follow-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\nbutton {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1em;\r\n  color: #007bff; /* Azul predeterminado */\r\n}\r\n\r\nbutton.following {\r\n  color: green; /* Cambia el color si ya está siguiendo */\r\n}\r\n\r\nspan {\r\n  margin-left: 0.5em;\r\n}\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;EACOC,KAAK,EAAC;;;SAAyBC,IAAA,CAAAC,WAAW,a,cAA/CC,mBAAA,CAMM,OANNC,UAMM,GALJC,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEP,IAAA,CAAAQ,YAAA,IAAAR,IAAA,CAAAQ,YAAA,IAAAD,IAAA,CAAY;IAAGR,KAAK,EAFxCU,eAAA;MAAAC,SAAA,EAEuDV,IAAA,CAAAC;IAAW;MAC5DG,mBAAA,CAAuD,cAAAO,gBAAA,CAA9CX,IAAA,CAAAC,WAAW,0C,kBAEtBG,mBAAA,CAA2C,cAAAO,gBAAA,CAAlCX,IAAA,CAAAY,aAAa,IAAG,aAAW,iBACpCR,mBAAA,CAA0C,cAAAO,gBAAA,CAAjCX,IAAA,CAAAa,cAAc,IAAG,WAAS,gB,KANvCC,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}