{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiClient from \"@/services/ApiService\";\nimport eventBus from \"@/eventBus.js\";\nexport default {\n  data() {\n    return {\n      postData: {\n        title: \"\",\n        description: \"\",\n        user_id: \"\"\n      },\n      image: null,\n      pdf: null,\n      users: []\n    };\n  },\n  methods: {\n    onImageChange(event) {\n      this.image = event.target.files[0];\n    },\n    onPdfChange(event) {\n      this.pdf = event.target.files[0];\n    },\n    async fetchUsers() {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        const response = await apiClient.get(\"/users\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.users = response.data;\n      } catch (error) {\n        console.error(\"Error al obtener los usuarios:\", error.response?.data || error);\n      }\n    },\n    async createPost() {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        const formData = new FormData();\n        formData.append(\"title\", this.postData.title);\n        formData.append(\"description\", this.postData.description);\n        formData.append(\"user_id\", this.postData.user_id);\n        if (this.image) formData.append(\"images\", this.image);\n        if (this.pdf) formData.append(\"pdf\", this.pdf);\n        await apiClient.post(\"/posts\", formData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        // Redirige y pasa la alerta por query\n        this.$router.push({\n          path: \"/admin/posts-list\",\n          query: {\n            alert: \"Publicación creada exitosamente\",\n            type: \"success\"\n          }\n        });\n      } catch (error) {\n        // Muestra la alerta en la misma vista si falla\n        eventBus.emit('alert', {\n          message: \"Error al crear la publicación. Verifica los datos e inténtalo de nuevo.\",\n          type: \"danger\"\n        });\n      }\n    },\n    cancel() {\n      this.$router.push(\"/admin/posts-list\");\n    }\n  },\n  mounted() {\n    this.fetchUsers();\n  }\n};","map":{"version":3,"names":["apiClient","eventBus","data","postData","title","description","user_id","image","pdf","users","methods","onImageChange","event","target","files","onPdfChange","fetchUsers","token","localStorage","getItem","response","get","headers","Authorization","error","console","createPost","formData","FormData","append","post","$router","push","path","query","alert","type","emit","message","cancel","mounted"],"sources":["D:\\Downloads\\BookSharing_SocialNetwork\\fronvue\\src\\components\\admin\\post-create_component.vue"],"sourcesContent":["<template>\r\n    <div class=\"container-fluid mt-4\">\r\n        <h2>Crear Publicación</h2>\r\n        <form @submit.prevent=\"createPost\" class=\"mt-4 w-30\">\r\n            <div class=\"form-group mb-3\">\r\n                <label for=\"title\">Título</label>\r\n                <input type=\"text\" id=\"title\" v-model=\"postData.title\" class=\"form-control\"\r\n                    placeholder=\"Título de la publicación\" required />\r\n            </div>\r\n            <div class=\"form-group mb-3\">\r\n                <label for=\"description\">Descripción</label>\r\n                <textarea id=\"description\" v-model=\"postData.description\" class=\"form-control\" placeholder=\"Descripción\"\r\n                    required></textarea>\r\n            </div>\r\n            <div class=\"form-group mb-3\">\r\n                <label for=\"image\">Imagen</label>\r\n                <input type=\"file\" id=\"image\" @change=\"onImageChange\" class=\"form-control\" accept=\"image/*\" />\r\n            </div>\r\n            <div class=\"form-group mb-3\">\r\n                <label for=\"pdf\">Archivo PDF</label>\r\n                <input type=\"file\" id=\"pdf\" @change=\"onPdfChange\" class=\"form-control\" accept=\"application/pdf\" />\r\n            </div>\r\n            <div class=\"form-group mb-3\">\r\n                <label for=\"user\">Usuario</label>\r\n                <select id=\"user\" v-model=\"postData.user_id\" class=\"form-control\" required>\r\n                    <option value=\"\" disabled>Selecciona un usuario</option>\r\n                    <option v-for=\"user in users\" :key=\"user.id\" :value=\"user.id\">{{ user.name }}</option>\r\n                </select>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-primary\">Crear Publicación</button>\r\n            <button type=\"button\" class=\"btn btn-secondary ml-3\" @click=\"cancel\">\r\n                Cancelar\r\n            </button>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport apiClient from \"@/services/ApiService\";\r\nimport eventBus from \"@/eventBus.js\";\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            postData: {\r\n                title: \"\",\r\n                description: \"\",\r\n                user_id: \"\"\r\n            },\r\n            image: null,\r\n            pdf: null,\r\n            users: []\r\n        };\r\n    },\r\n    methods: {\r\n        onImageChange(event) {\r\n            this.image = event.target.files[0];\r\n        },\r\n        onPdfChange(event) {\r\n            this.pdf = event.target.files[0];\r\n        },\r\n        async fetchUsers() {\r\n            try {\r\n                const token = localStorage.getItem(\"authToken\");\r\n                const response = await apiClient.get(\"/users\", {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`\r\n                    }\r\n                });\r\n                this.users = response.data;\r\n            } catch (error) {\r\n                console.error(\"Error al obtener los usuarios:\", error.response?.data || error);\r\n            }\r\n        },\r\n        async createPost() {\r\n            try {\r\n                const token = localStorage.getItem(\"authToken\");\r\n                const formData = new FormData();\r\n                formData.append(\"title\", this.postData.title);\r\n                formData.append(\"description\", this.postData.description);\r\n                formData.append(\"user_id\", this.postData.user_id);\r\n                if (this.image) formData.append(\"images\", this.image);\r\n                if (this.pdf) formData.append(\"pdf\", this.pdf);\r\n\r\n                await apiClient.post(\r\n                    \"/posts\",\r\n                    formData,\r\n                    {\r\n                        headers: {\r\n                            Authorization: `Bearer ${token}`,\r\n                            \"Content-Type\": \"multipart/form-data\"\r\n                        }\r\n                    }\r\n                );\r\n                // Redirige y pasa la alerta por query\r\n                this.$router.push({\r\n                    path: \"/admin/posts-list\",\r\n                    query: { alert: \"Publicación creada exitosamente\", type: \"success\" }\r\n                });\r\n            } catch (error) {\r\n                // Muestra la alerta en la misma vista si falla\r\n                eventBus.emit('alert', { message: \"Error al crear la publicación. Verifica los datos e inténtalo de nuevo.\", type: \"danger\" });\r\n            }\r\n        },\r\n        cancel() {\r\n            this.$router.push(\"/admin/posts-list\");\r\n        },\r\n    },\r\n    mounted() {\r\n        this.fetchUsers();\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n    max-width: 600px;\r\n}\r\n</style>"],"mappings":";AAsCA,OAAOA,SAAQ,MAAO,uBAAuB;AAC7C,OAAOC,QAAO,MAAO,eAAe;AAEpC,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE;QACNC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE,EAAE;QACfC,OAAO,EAAE;MACb,CAAC;MACDC,KAAK,EAAE,IAAI;MACXC,GAAG,EAAE,IAAI;MACTC,KAAK,EAAE;IACX,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,aAAaA,CAACC,KAAK,EAAE;MACjB,IAAI,CAACL,KAAI,GAAIK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACtC,CAAC;IACDC,WAAWA,CAACH,KAAK,EAAE;MACf,IAAI,CAACJ,GAAE,GAAII,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACpC,CAAC;IACD,MAAME,UAAUA,CAAA,EAAG;MACf,IAAI;QACA,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC/C,MAAMC,QAAO,GAAI,MAAMpB,SAAS,CAACqB,GAAG,CAAC,QAAQ,EAAE;UAC3CC,OAAO,EAAE;YACLC,aAAa,EAAE,UAAUN,KAAK;UAClC;QACJ,CAAC,CAAC;QACF,IAAI,CAACR,KAAI,GAAIW,QAAQ,CAAClB,IAAI;MAC9B,EAAE,OAAOsB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACJ,QAAQ,EAAElB,IAAG,IAAKsB,KAAK,CAAC;MAClF;IACJ,CAAC;IACD,MAAME,UAAUA,CAAA,EAAG;MACf,IAAI;QACA,MAAMT,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC/C,MAAMQ,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC1B,QAAQ,CAACC,KAAK,CAAC;QAC7CuB,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC1B,QAAQ,CAACE,WAAW,CAAC;QACzDsB,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC1B,QAAQ,CAACG,OAAO,CAAC;QACjD,IAAI,IAAI,CAACC,KAAK,EAAEoB,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACtB,KAAK,CAAC;QACrD,IAAI,IAAI,CAACC,GAAG,EAAEmB,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAE,IAAI,CAACrB,GAAG,CAAC;QAE9C,MAAMR,SAAS,CAAC8B,IAAI,CAChB,QAAQ,EACRH,QAAQ,EACR;UACIL,OAAO,EAAE;YACLC,aAAa,EAAE,UAAUN,KAAK,EAAE;YAChC,cAAc,EAAE;UACpB;QACJ,CACJ,CAAC;QACD;QACA,IAAI,CAACc,OAAO,CAACC,IAAI,CAAC;UACdC,IAAI,EAAE,mBAAmB;UACzBC,KAAK,EAAE;YAAEC,KAAK,EAAE,iCAAiC;YAAEC,IAAI,EAAE;UAAU;QACvE,CAAC,CAAC;MACN,EAAE,OAAOZ,KAAK,EAAE;QACZ;QACAvB,QAAQ,CAACoC,IAAI,CAAC,OAAO,EAAE;UAAEC,OAAO,EAAE,yEAAyE;UAAEF,IAAI,EAAE;QAAS,CAAC,CAAC;MAClI;IACJ,CAAC;IACDG,MAAMA,CAAA,EAAG;MACL,IAAI,CAACR,OAAO,CAACC,IAAI,CAAC,mBAAmB,CAAC;IAC1C;EACJ,CAAC;EACDQ,OAAOA,CAAA,EAAG;IACN,IAAI,CAACxB,UAAU,CAAC,CAAC;EACrB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}