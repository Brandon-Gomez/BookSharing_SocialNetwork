{"ast":null,"code":"import apiClient from \"@/services/ApiService\";\nexport default {\n  props: {\n    postId: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      isLiked: null,\n      // Cambiar a null para evitar un valor inicial incorrecto\n      likeCount: 0\n    };\n  },\n  async created() {\n    try {\n      // Obtén el contador de \"likes\" y verifica si el usuario ya ha dado like\n      await this.fetchLikeCount();\n      await this.checkIfLiked();\n    } catch (error) {\n      console.error(\"Error during initialization:\", error);\n    }\n  },\n  methods: {\n    // Obtiene el contador de \"likes\"\n    async fetchLikeCount() {\n      try {\n        const response = await apiClient.get(`/like/count/${this.postId}`);\n        this.likeCount = response.data.likeCount;\n      } catch (error) {\n        console.error(\"Error fetching like count:\", error);\n      }\n    },\n    // Cambia el estado del \"like\" (activar/desactivar)\n    async toggleLike() {\n      const token = localStorage.getItem(\"authToken\");\n      if (!token) {\n        console.error(\"Authentication token not found\");\n        return;\n      }\n      try {\n        if (this.isLiked) {\n          // Quitar \"like\"\n          await apiClient.delete(`/like/${this.postId}`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            },\n            data: {\n              postId: this.postId\n            }\n          });\n          this.likeCount--;\n          this.isLiked = false;\n        } else {\n          // Agregar \"like\"\n          await apiClient.post(`/like`, {\n            postId: this.postId\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          this.likeCount++;\n          this.isLiked = true;\n        }\n      } catch (error) {\n        console.error(\"Error toggling like:\", error);\n      }\n    },\n    // Verifica si el usuario ya ha dado like\n    async checkIfLiked() {\n      const token = localStorage.getItem(\"authToken\");\n      if (!token) {\n        console.error(\"Authentication token not found\");\n        return;\n      }\n      try {\n        const response = await apiClient.get(`/like/check/${this.postId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.isLiked = response.data.isLiked; // Establecemos el valor de isLiked con la respuesta de la API\n      } catch (error) {\n        console.error(\"Error checking if liked:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["apiClient","props","postId","type","String","required","data","isLiked","likeCount","created","fetchLikeCount","checkIfLiked","error","console","methods","response","get","toggleLike","token","localStorage","getItem","delete","headers","Authorization","post"],"sources":["D:\\Downloads\\BookSharing_SocialNetwork\\fronvue\\src\\components\\like_component.vue"],"sourcesContent":["<template>\r\n  <div class=\"like-container\" v-if=\"isLiked !== null\">\r\n    <button\r\n      class=\"btn-wishlist btn-sm ml-3\"\r\n      type=\"button\"\r\n      data-bs-toggle=\"tooltip\"\r\n      data-bs-placement=\"left\"\r\n      :title=\"isLiked ? 'Quitar de favoritos' : 'Añadir a favoritos'\"\r\n      @click=\"toggleLike\"\r\n    >\r\n      <i v-if=\"!isLiked\" class=\"ci-heart\"></i>\r\n      <svg v-else xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"13\" height=\"14\" viewBox=\"0 0 20 20\">\r\n        <path\r\n          d=\"M10 3.22l-0.61-0.6c-0.983-0.931-2.314-1.504-3.779-1.504-3.038 0-5.5 2.462-5.5 5.5 0 1.462 0.571 2.791 1.501 3.776l-0.002-0.003 8.39 8.39 8.39-8.4c0.928-0.983 1.499-2.312 1.499-3.774 0-3.038-2.462-5.5-5.5-5.5-1.465 0-2.796 0.573-3.782 1.506l0.003-0.002-0.61 0.61z\"\r\n          fill=\"red\"\r\n        />\r\n      </svg>\r\n    </button>\r\n    <span>{{ likeCount }} Me gusta</span>\r\n  </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import apiClient from \"@/services/ApiService\";\r\n  \r\n  export default {\r\n    props: {\r\n      postId: {\r\n        type: String,\r\n        required: true,\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        isLiked: null, // Cambiar a null para evitar un valor inicial incorrecto\r\n        likeCount: 0,\r\n      };\r\n    },\r\n    async created() {\r\n      try {\r\n        // Obtén el contador de \"likes\" y verifica si el usuario ya ha dado like\r\n        await this.fetchLikeCount();\r\n        await this.checkIfLiked();\r\n      } catch (error) {\r\n        console.error(\"Error during initialization:\", error);\r\n      }\r\n    },\r\n    methods: {\r\n      // Obtiene el contador de \"likes\"\r\n      async fetchLikeCount() {\r\n        try {\r\n          const response = await apiClient.get(`/like/count/${this.postId}`);\r\n          this.likeCount = response.data.likeCount;\r\n        } catch (error) {\r\n          console.error(\"Error fetching like count:\", error);\r\n        }\r\n      },\r\n      // Cambia el estado del \"like\" (activar/desactivar)\r\n      async toggleLike() {\r\n        const token = localStorage.getItem(\"authToken\");\r\n        if (!token) {\r\n          console.error(\"Authentication token not found\");\r\n          return;\r\n        }\r\n  \r\n        try {\r\n          if (this.isLiked) {\r\n            // Quitar \"like\"\r\n            await apiClient.delete(`/like/${this.postId}`, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n              data: { postId: this.postId },\r\n            });\r\n            this.likeCount--;\r\n            this.isLiked = false;\r\n          } else {\r\n            // Agregar \"like\"\r\n            await apiClient.post(\r\n              `/like`,\r\n              { postId: this.postId },\r\n              { headers: { Authorization: `Bearer ${token}` } }\r\n            );\r\n            this.likeCount++;\r\n            this.isLiked = true;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error toggling like:\", error);\r\n        }\r\n      },\r\n      // Verifica si el usuario ya ha dado like\r\n      async checkIfLiked() {\r\n        const token = localStorage.getItem(\"authToken\");\r\n        if (!token) {\r\n          console.error(\"Authentication token not found\");\r\n          return;\r\n        }\r\n  \r\n        try {\r\n          const response = await apiClient.get(`/like/check/${this.postId}`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          this.isLiked = response.data.isLiked; // Establecemos el valor de isLiked con la respuesta de la API\r\n        } catch (error) {\r\n          console.error(\"Error checking if liked:\", error);\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":"AAuBE,OAAOA,SAAQ,MAAO,uBAAuB;AAE7C,eAAe;EACbC,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,IAAI;MAAE;MACfC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACF;MACA,MAAM,IAAI,CAACC,cAAc,CAAC,CAAC;MAC3B,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;IAC3B,EAAE,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EACDE,OAAO,EAAE;IACP;IACA,MAAMJ,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF,MAAMK,QAAO,GAAI,MAAMf,SAAS,CAACgB,GAAG,CAAC,eAAe,IAAI,CAACd,MAAM,EAAE,CAAC;QAClE,IAAI,CAACM,SAAQ,GAAIO,QAAQ,CAACT,IAAI,CAACE,SAAS;MAC1C,EAAE,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACD;IACA,MAAMK,UAAUA,CAAA,EAAG;MACjB,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,IAAI,CAACF,KAAK,EAAE;QACVL,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAC;QAC/C;MACF;MAEA,IAAI;QACF,IAAI,IAAI,CAACL,OAAO,EAAE;UAChB;UACA,MAAMP,SAAS,CAACqB,MAAM,CAAC,SAAS,IAAI,CAACnB,MAAM,EAAE,EAAE;YAC7CoB,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAUL,KAAK;YAAG,CAAC;YAC7CZ,IAAI,EAAE;cAAEJ,MAAM,EAAE,IAAI,CAACA;YAAO;UAC9B,CAAC,CAAC;UACF,IAAI,CAACM,SAAS,EAAE;UAChB,IAAI,CAACD,OAAM,GAAI,KAAK;QACtB,OAAO;UACL;UACA,MAAMP,SAAS,CAACwB,IAAI,CAClB,OAAO,EACP;YAAEtB,MAAM,EAAE,IAAI,CAACA;UAAO,CAAC,EACvB;YAAEoB,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAUL,KAAK;YAAG;UAAE,CAClD,CAAC;UACD,IAAI,CAACV,SAAS,EAAE;UAChB,IAAI,CAACD,OAAM,GAAI,IAAI;QACrB;MACF,EAAE,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACD;IACA,MAAMD,YAAYA,CAAA,EAAG;MACnB,MAAMO,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,IAAI,CAACF,KAAK,EAAE;QACVL,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAC;QAC/C;MACF;MAEA,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMf,SAAS,CAACgB,GAAG,CAAC,eAAe,IAAI,CAACd,MAAM,EAAE,EAAE;UACjEoB,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUL,KAAK;UAAG;QAC9C,CAAC,CAAC;QACF,IAAI,CAACX,OAAM,GAAIQ,QAAQ,CAACT,IAAI,CAACC,OAAO,EAAE;MACxC,EAAE,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}