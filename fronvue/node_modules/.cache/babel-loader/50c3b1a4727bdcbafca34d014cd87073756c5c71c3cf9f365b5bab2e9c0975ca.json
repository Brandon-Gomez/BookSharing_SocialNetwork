{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiClient from \"@/services/ApiService\";\nimport eventBus from \"@/eventBus.js\";\nexport default {\n  data() {\n    return {\n      postData: {\n        title: \"\",\n        description: \"\",\n        user_id: \"\",\n        category_id: \"\"\n      },\n      image: null,\n      pdf: null,\n      categories: []\n    };\n  },\n  methods: {\n    async fetchPost() {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        const postId = this.$route.params.postId;\n        const response = await apiClient.get(`/posts/${postId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.postData = response.data;\n      } catch (error) {\n        console.error(\"Error al obtener la publicación:\", error.response?.data || error);\n        alert(\"Error al obtener la publicación.\");\n      }\n    },\n    async fetchCategories() {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        const response = await apiClient.get(\"admin/categories\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.categories = response.data;\n      } catch (error) {\n        console.error(\"Error al obtener las categorías:\", error.response?.data || error);\n      }\n    },\n    onImageChange(event) {\n      this.image = event.target.files[0];\n    },\n    onPdfChange(event) {\n      this.pdf = event.target.files[0];\n    },\n    async updatePost() {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        const postId = this.$route.params.postId;\n        const formData = new FormData();\n        formData.append(\"title\", this.postData.title);\n        formData.append(\"description\", this.postData.description);\n        if (this.image) formData.append(\"images\", this.image);\n        if (this.pdf) formData.append(\"pdf\", this.pdf);\n        await apiClient.put(`/posts/${postId}`, formData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        this.$router.push({\n          path: \"/admin/posts-list\",\n          query: {\n            alert: \"Publicación actualizada exitosamente\",\n            type: \"success\"\n          }\n        });\n      } catch (error) {\n        // Muestra la alerta en la misma vista si falla\n        eventBus.emit('alert', {\n          message: \"Error al actualizar la publicación.\",\n          type: \"danger\"\n        });\n        console.error(\"Error al actualizar la publicación:\", error.response?.data || error);\n      }\n    },\n    cancel() {\n      this.$router.push(\"/admin/posts-list\");\n    }\n  },\n  mounted() {\n    this.fetchPost();\n  }\n};","map":{"version":3,"names":["apiClient","eventBus","data","postData","title","description","user_id","category_id","image","pdf","categories","methods","fetchPost","token","localStorage","getItem","postId","$route","params","response","get","headers","Authorization","error","console","alert","fetchCategories","onImageChange","event","target","files","onPdfChange","updatePost","formData","FormData","append","put","$router","push","path","query","type","emit","message","cancel","mounted"],"sources":["D:\\Downloads\\BookSharing_SocialNetwork\\fronvue\\src\\components\\admin\\post-edit_component.vue"],"sourcesContent":["<template>\r\n    <div class=\"container-fluid mt-4\">\r\n        <div class=\"w-50\">\r\n            <h2>Editar Publicación</h2>\r\n            <form @submit.prevent=\"updatePost\" class=\"my-4\" v-if=\"postData\">\r\n                <div class=\"form-group mb-3\">\r\n                    <label for=\"title\">Título</label>\r\n                    <input type=\"text\" id=\"title\" v-model=\"postData.title\" class=\"form-control\" required />\r\n                </div>\r\n                <div class=\"form-group mb-3\">\r\n                    <label for=\"description\">Descripción</label>\r\n                    <textarea id=\"description\" v-model=\"postData.description\" class=\"form-control\" required></textarea>\r\n                </div>\r\n                <div class=\"form-group mb-3\">\r\n                    <label for=\"category\">Categoría</label>\r\n                    <select id=\"category\" v-model=\"postData.category_id\" class=\"form-control\" required>\r\n                        <option value=\"\" disabled>Selecciona una categoría</option>\r\n                        <option v-for=\"cat in categories\" :key=\"cat.id\" :value=\"cat.id\">{{ cat.name }}</option>\r\n                    </select>\r\n                </div>\r\n                <div class=\"form-group mb-3\">\r\n                    <label for=\"image\">Imagen actual</label>\r\n                    <div v-if=\"postData.image\">\r\n                        <img :src=\"postData.image\" alt=\"Imagen actual\" class=\"img-thumbnail mb-2\"\r\n                            style=\"max-width: 200px;\" />\r\n                    </div>\r\n                    <input type=\"file\" id=\"image\" @change=\"onImageChange\" class=\"form-control\" accept=\"image/*\" />\r\n                </div>\r\n                <div class=\"form-group mb-3\">\r\n                    <label for=\"pdf\">Archivo PDF actual</label>\r\n                    <div v-if=\"postData.pdf_file\">\r\n                        <a :href=\"postData.pdf_file\" target=\"_blank\">Ver PDF</a>\r\n                    </div>\r\n                    <input type=\"file\" id=\"pdf\" @change=\"onPdfChange\" class=\"form-control\" accept=\"application/pdf\" />\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Guardar Cambios</button>\r\n                <button type=\"button\" class=\"btn btn-secondary ml-3\" @click=\"cancel\">Cancelar</button>\r\n            </form>\r\n            <div v-else>\r\n                <p>Cargando publicación...</p>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport apiClient from \"@/services/ApiService\";\r\nimport eventBus from \"@/eventBus.js\";\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            postData: {\r\n                title: \"\",\r\n                description: \"\",\r\n                user_id: \"\",\r\n                category_id: \"\",\r\n            },\r\n            image: null,\r\n            pdf: null,\r\n            categories: [],\r\n\r\n        };\r\n    },\r\n    methods: {\r\n        async fetchPost() {\r\n            try {\r\n                const token = localStorage.getItem(\"authToken\");\r\n                const postId = this.$route.params.postId;\r\n                const response = await apiClient.get(`/posts/${postId}`, {\r\n                    headers: { Authorization: `Bearer ${token}` }\r\n                });\r\n                this.postData = response.data;\r\n            } catch (error) {\r\n                console.error(\"Error al obtener la publicación:\", error.response?.data || error);\r\n                alert(\"Error al obtener la publicación.\");\r\n            }\r\n        },\r\n        async fetchCategories() {\r\n            try {\r\n                const token = localStorage.getItem(\"authToken\");\r\n                const response = await apiClient.get(\"admin/categories\", {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`\r\n                    }\r\n                });\r\n                this.categories = response.data;\r\n            } catch (error) {\r\n                console.error(\"Error al obtener las categorías:\", error.response?.data || error);\r\n            }\r\n        },\r\n        onImageChange(event) {\r\n            this.image = event.target.files[0];\r\n        },\r\n        onPdfChange(event) {\r\n            this.pdf = event.target.files[0];\r\n        },\r\n        async updatePost() {\r\n            try {\r\n                const token = localStorage.getItem(\"authToken\");\r\n                const postId = this.$route.params.postId;\r\n                const formData = new FormData();\r\n                formData.append(\"title\", this.postData.title);\r\n                formData.append(\"description\", this.postData.description);\r\n                if (this.image) formData.append(\"images\", this.image);\r\n                if (this.pdf) formData.append(\"pdf\", this.pdf);\r\n                \r\n\r\n                await apiClient.put(`/posts/${postId}`, formData, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"multipart/form-data\"\r\n                    }\r\n                });\r\n                this.$router.push({\r\n                    path: \"/admin/posts-list\",\r\n                    query: { alert: \"Publicación actualizada exitosamente\", type: \"success\" }\r\n                });\r\n            } catch (error) {\r\n                // Muestra la alerta en la misma vista si falla\r\n                eventBus.emit('alert', { message: \"Error al actualizar la publicación.\", type: \"danger\" });\r\n                console.error(\"Error al actualizar la publicación:\", error.response?.data || error);\r\n            }\r\n        },\r\n        cancel() {\r\n            this.$router.push(\"/admin/posts-list\");\r\n        }\r\n    },\r\n    mounted() {\r\n        this.fetchPost();\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n    max-width: 600px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}