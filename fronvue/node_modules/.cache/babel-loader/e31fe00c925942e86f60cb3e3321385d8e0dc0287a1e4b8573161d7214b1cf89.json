{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiClient from '@/services/ApiService';\nexport default {\n  data() {\n    return {\n      newPost: {\n        title: '',\n        description: '',\n        image: null,\n        pdf: null\n      },\n      profileData: {\n        name: '',\n        birthdate: '',\n        gender: '',\n        description: ''\n      },\n      posts: [],\n      newComment: '',\n      profilePhoto: []\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.newPost.image = event.target.files[0]; // Asigna la imagen\n    },\n    onPdfChange(event) {\n      this.newPost.pdf = event.target.files[0]; // Asigna el PDF\n    },\n    async createPost() {\n      try {\n        const formData = new FormData();\n        formData.append(\"title\", this.newPost.title);\n        formData.append(\"description\", this.newPost.description);\n\n        // Agrega la imagen y el PDF si existen\n        if (this.newPost.image) {\n          formData.append(\"images\", this.newPost.image); // Aseg칰rate de que el nombre coincida con el nombre esperado en el backend\n        }\n        if (this.newPost.pdf) {\n          formData.append(\"pdf\", this.newPost.pdf); // Aseg칰rate de que el nombre coincida con el nombre esperado en el backend\n        }\n        const token = localStorage.getItem(\"authToken\");\n        const response = await apiClient.post(\"/posts\", formData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"multipart/form-data\" // Asegura que se env칤e como multipart/form-data\n          }\n        });\n        console.log(response.data);\n        this.newPost.title = \"\";\n        this.newPost.description = \"\";\n        this.newPost.image = null;\n        this.newPost.pdf = null;\n        this.$router.push(`/profile/${this.profileData.username}`).then(() => {\n          window.location.reload();\n        });\n        this.getAllPosts();\n      } catch (error) {\n        console.error(\"Error creating post:\", error);\n      }\n    },\n    async getAllPosts() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await apiClient.get('/posts/user', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.posts = response.data;\n      } catch (error) {\n        console.error('Error getting post:', error);\n      }\n    }\n    // async likePost(postId) {\n    //   await apiClient(`/posts/${postId}/like`, {\n    //     userId: this.$store.state.userId,  // Aseg칰rate de pasar el userId\n    //   });\n    //   this.loadPosts(); // Actualiza la lista de posts\n    // },\n    // async addComment(postId) {\n    //   if (this.newComment.trim()) {\n    //     await apiClient(`/posts/${postId}/comment`, {\n    //       userId: this.$store.state.userId,\n    //       comment: this.newComment,\n    //     });\n    //     this.newComment = '';\n    //     this.loadPosts(); // Recargar los posts con los nuevos comentarios\n    //   }\n    // },\n  },\n  mounted() {\n    this.getAllPosts(); // Cargar publicaciones al montar el componente\n    this.profileData = JSON.parse(localStorage.getItem('profileData'));\n  }\n};","map":{"version":3,"names":["apiClient","data","newPost","title","description","image","pdf","profileData","name","birthdate","gender","posts","newComment","profilePhoto","methods","onFileChange","event","target","files","onPdfChange","createPost","formData","FormData","append","token","localStorage","getItem","response","post","headers","Authorization","console","log","$router","push","username","then","window","location","reload","getAllPosts","error","get","mounted","JSON","parse"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\post_component.vue"],"sourcesContent":["<template>\r\n  <div class=\"container post-container my-4\">\r\n    <div class=\"container py-4\">\r\n      <h2 class=\"mb-4\">Crear una nueva publicaci칩n</h2>\r\n      <form @submit.prevent=\"createPost\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"title\" class=\"form-label\">T칤tulo:</label>\r\n          <input v-model=\"newPost.title\" type=\"text\" id=\"title\" class=\"form-control\"\r\n            placeholder=\"Ingrese el t칤tulo de la publicaci칩n\" required />\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"description\" class=\"form-label\">Descripci칩n:</label>\r\n          <textarea v-model=\"newPost.description\" id=\"description\" class=\"form-control\" rows=\"4\"\r\n            placeholder=\"Escriba la descripci칩n aqu칤\" required></textarea>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"photo\" class=\"form-label\">Subir Foto:</label>\r\n          <input type=\"file\" id=\"photo\" class=\"form-control\" @change=\"onFileChange\" accept=\"image/*\" />\r\n        </div>\r\n        <div class=\"mb-4\">\r\n          <label for=\"book\" class=\"form-label\">Subir Libro (PDF):</label>\r\n          <input type=\"file\" id=\"book\" class=\"form-control\" @change=\"onPdfChange\" accept=\"application/pdf\" />\r\n        </div>\r\n        <button type=\"submit\" class=\"btn btn-primary w-100\">Publicar</button>\r\n      </form>\r\n    </div>\r\n\r\n    <!-- <h2>Publicaciones recientes:</h2>\r\n    <div v-for=\"post in posts.filter(post => post.username === this.profileData.username).slice(0, 3)\" :key=\"post.id\" class=\"card mb-4 shadow-sm\">\r\n      <div class=\"card-body\">\r\n        <h2 class=\"card-title\">{{ post.title }}</h2>\r\n        <p class=\"text-muted small mb-2\">subido por {{ post.username }}</p>\r\n        <p class=\"card-text\">{{ post.description }}</p>\r\n        <img v-if=\"post.image\" :src=\"post.image\" alt=\"Post Image\"\r\n          class=\"img-fluid rounded my-3\" />\r\n        <div class=\"d-flex justify-content-between align-items-center\">\r\n          <a v-if=\"post.pdf_file\" :href=\"post.image\" target=\"_blank\" class=\"btn btn-primary\">\r\n            游늯 Ver libro (PDF)\r\n          </a>\r\n          <button @click=\"likePost(post.id)\" class=\"btn btn-success\">\r\n            游녨 Like ( {{ post.likes_count || 0 }} )\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport apiClient from '@/services/ApiService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      newPost: {\r\n        title: '',\r\n        description: '',\r\n        image: null,\r\n        pdf: null,\r\n      },\r\n      profileData: {\r\n        name: '',\r\n        birthdate: '',\r\n        gender: '',\r\n        description: ''\r\n      },\r\n      posts: [],\r\n      newComment: '',\r\n      profilePhoto: [],\r\n    };\r\n  },\r\n  methods: {\r\n    onFileChange(event) {\r\n      this.newPost.image = event.target.files[0]; // Asigna la imagen\r\n    },\r\n    onPdfChange(event) {\r\n      this.newPost.pdf = event.target.files[0]; // Asigna el PDF\r\n    },\r\n    async createPost() {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append(\"title\", this.newPost.title);\r\n    formData.append(\"description\", this.newPost.description);\r\n    \r\n    // Agrega la imagen y el PDF si existen\r\n    if (this.newPost.image) {\r\n      formData.append(\"images\", this.newPost.image); // Aseg칰rate de que el nombre coincida con el nombre esperado en el backend\r\n    }\r\n    if (this.newPost.pdf) {\r\n      formData.append(\"pdf\", this.newPost.pdf); // Aseg칰rate de que el nombre coincida con el nombre esperado en el backend\r\n    }\r\n\r\n    const token = localStorage.getItem(\"authToken\");\r\n    const response = await apiClient.post(\"/posts\", formData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"multipart/form-data\", // Asegura que se env칤e como multipart/form-data\r\n      },\r\n    });\r\n\r\n    console.log(response.data);\r\n    this.newPost.title = \"\";\r\n    this.newPost.description = \"\";\r\n    this.newPost.image = null;\r\n    this.newPost.pdf = null;\r\n\r\n    this.$router.push(`/profile/${this.profileData.username}`).then(() => {\r\n            window.location.reload();\r\n          });\r\n\r\n    this.getAllPosts();\r\n  } catch (error) {\r\n    console.error(\"Error creating post:\", error);\r\n  }\r\n},\r\n\r\n    async getAllPosts() {\r\n      try {\r\n        const token = localStorage.getItem('authToken');\r\n        const response = await apiClient.get('/posts/user', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n        )\r\n        this.posts = response.data;\r\n      } catch (error) {\r\n        console.error('Error getting post:', error);\r\n      }\r\n    },\r\n    // async likePost(postId) {\r\n    //   await apiClient(`/posts/${postId}/like`, {\r\n    //     userId: this.$store.state.userId,  // Aseg칰rate de pasar el userId\r\n    //   });\r\n    //   this.loadPosts(); // Actualiza la lista de posts\r\n    // },\r\n    // async addComment(postId) {\r\n    //   if (this.newComment.trim()) {\r\n    //     await apiClient(`/posts/${postId}/comment`, {\r\n    //       userId: this.$store.state.userId,\r\n    //       comment: this.newComment,\r\n    //     });\r\n    //     this.newComment = '';\r\n    //     this.loadPosts(); // Recargar los posts con los nuevos comentarios\r\n    //   }\r\n    // },\r\n  },\r\n  mounted() {\r\n    this.getAllPosts(); // Cargar publicaciones al montar el componente\r\n    this.profileData = JSON.parse(localStorage.getItem('profileData'));\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Agrega estilo para mejorar la presentaci칩n */\r\n.post {\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.post-container {\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  /* Blanco con 90% de opacidad */\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.card-title {\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.text-muted {\r\n  font-size: 0.9rem;\r\n  font-style: italic;\r\n}\r\n\r\n.img-fluid {\r\n  max-height: 300px;\r\n  /* Limitar la altura de la imagen si es muy grande */\r\n  object-fit: cover;\r\n}\r\n\r\n.container {\r\n  max-width: 600px;\r\n}\r\n\r\n.form-label {\r\n  font-weight: bold;\r\n}\r\n\r\n.btn {\r\n  font-size: 1.1em;\r\n  padding: 10px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}