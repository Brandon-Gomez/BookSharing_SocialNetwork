{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiClient from '@/services/ApiService'; // Asegúrate de tener tu servicio de API configurado\n\nexport default {\n  methods: {\n    // Verificar la existencia del token\n    checkToken() {\n      const token = localStorage.getItem('authToken'); // El token debe ser recuperado aquí\n      if (!token) {\n        console.error('No se encontró el token. Redirigiendo a login.');\n        this.$router.push('/login');\n        return false;\n      }\n      return true;\n    },\n    // Redirigir a una ruta específica, siempre verificando el token\n    goTo(route) {\n      if (this.checkToken()) {\n        // Verificar el token antes de proceder\n        this.$router.push(route);\n      }\n    },\n    // Método actualizado para redirigir al perfil del usuario\n    async goToProfile() {\n      if (this.checkToken()) {\n        // Verificar el token antes de proceder\n        const token = localStorage.getItem('authToken'); // Recuperar el token en este método\n        try {\n          // Obtener la información del perfil desde el backend\n          const response = await apiClient.get(`/profile/${this.$route.params.username}`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const username = response.data.username; // Obtener el nombre de usuario del perfil\n          if (username) {\n            this.$router.push(`/profile/${username}`);\n          } else {\n            console.error('El perfil no contiene un nombre de usuario válido');\n          }\n        } catch (error) {\n          console.error('Error al obtener el perfil:', error);\n          this.$router.push('/login'); // Redirigir al login en caso de error\n        }\n      }\n    },\n    // Emitir evento para búsqueda (puedes agregar lógica extra si quieres verificar el token aquí también)\n    triggerSearch() {\n      if (this.checkToken()) {\n        // Verificar el token antes de proceder\n        this.$emit('search');\n      }\n    },\n    // Cerrar sesión (limpiar localStorage y redirigir a login)\n    logout() {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('username');\n      this.$router.push('/login');\n    }\n  }\n};","map":{"version":3,"names":["apiClient","methods","checkToken","token","localStorage","getItem","console","error","$router","push","goTo","route","goToProfile","response","get","$route","params","username","headers","Authorization","data","triggerSearch","$emit","logout","removeItem"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\navbar_component.vue"],"sourcesContent":["<template>\r\n    <nav class=\"navbar\">\r\n      <ul>\r\n        <!-- Home icon -->\r\n        <li @click=\"goTo('/')\">\r\n          <i class=\"fas fa-home\"></i>\r\n          <span>Inicio</span>\r\n        </li>\r\n        <!-- Profile icon -->\r\n        <li @click=\"goToProfile\">\r\n          <i class=\"fas fa-user\"></i>\r\n          <span>Perfil</span>\r\n        </li>\r\n        <!-- Search icon -->\r\n        <li @click=\"triggerSearch\">\r\n          <i class=\"fas fa-search\"></i>\r\n          <span>Buscar</span>\r\n        </li>\r\n        <!-- Logout icon -->\r\n        <li @click=\"logout\">\r\n          <i class=\"fas fa-sign-out-alt\"></i>\r\n          <span>Cerrar sesión</span>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  </template>\r\n  \r\n  <script>\r\n  import apiClient from '@/services/ApiService';  // Asegúrate de tener tu servicio de API configurado\r\n  \r\n  export default {\r\n    methods: {\r\n      // Verificar la existencia del token\r\n      checkToken() {\r\n        const token = localStorage.getItem('authToken');  // El token debe ser recuperado aquí\r\n        if (!token) {\r\n          console.error('No se encontró el token. Redirigiendo a login.');\r\n          this.$router.push('/login');\r\n          return false;\r\n        }\r\n        return true;\r\n      },\r\n  \r\n      // Redirigir a una ruta específica, siempre verificando el token\r\n      goTo(route) {\r\n        if (this.checkToken()) {  // Verificar el token antes de proceder\r\n          this.$router.push(route);\r\n        }\r\n      },\r\n  \r\n      // Método actualizado para redirigir al perfil del usuario\r\n      async goToProfile() {\r\n        if (this.checkToken()) {  // Verificar el token antes de proceder\r\n          const token = localStorage.getItem('authToken');  // Recuperar el token en este método\r\n          try {\r\n            // Obtener la información del perfil desde el backend\r\n            const response = await apiClient.get(`/profile/${this.$route.params.username}`, {\r\n              headers: {\r\n                Authorization: `Bearer ${token}`\r\n              }\r\n            }); \r\n  \r\n            const username = response.data.username;  // Obtener el nombre de usuario del perfil\r\n            if (username) {\r\n              this.$router.push(`/profile/${username}`);\r\n            } else {\r\n              console.error('El perfil no contiene un nombre de usuario válido');\r\n            }\r\n          } catch (error) {\r\n            console.error('Error al obtener el perfil:', error);\r\n            this.$router.push('/login');  // Redirigir al login en caso de error\r\n          }\r\n        }\r\n      },\r\n  \r\n      // Emitir evento para búsqueda (puedes agregar lógica extra si quieres verificar el token aquí también)\r\n      triggerSearch() {\r\n        if (this.checkToken()) {  // Verificar el token antes de proceder\r\n          this.$emit('search');\r\n        }\r\n      },\r\n  \r\n      // Cerrar sesión (limpiar localStorage y redirigir a login)\r\n      logout() {\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('username');\r\n        this.$router.push('/login');\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n  \r\n  <style scoped>\r\n  .navbar {\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: #2c3e50;\r\n    padding: 20px;\r\n    height: 100vh;\r\n  }\r\n  \r\n  .navbar ul {\r\n    list-style: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  .navbar li {\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 20px 0;\r\n    cursor: pointer;\r\n    color: #ecf0f1;\r\n    font-size: 18px;\r\n  }\r\n  \r\n  .navbar li i {\r\n    margin-right: 10px;\r\n    font-size: 24px;\r\n  }\r\n  \r\n  .navbar li:hover {\r\n    color: #3498db;\r\n  }\r\n  \r\n  .navbar li span {\r\n    font-size: 18px;\r\n  }\r\n  </style>\r\n  "],"mappings":";AA4BE,OAAOA,SAAQ,MAAO,uBAAuB,EAAG;;AAEhD,eAAe;EACbC,OAAO,EAAE;IACP;IACAC,UAAUA,CAAA,EAAG;MACX,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAG;MAClD,IAAI,CAACF,KAAK,EAAE;QACVG,OAAO,CAACC,KAAK,CAAC,gDAAgD,CAAC;QAC/D,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC3B,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb,CAAC;IAED;IACAC,IAAIA,CAACC,KAAK,EAAE;MACV,IAAI,IAAI,CAACT,UAAU,CAAC,CAAC,EAAE;QAAG;QACxB,IAAI,CAACM,OAAO,CAACC,IAAI,CAACE,KAAK,CAAC;MAC1B;IACF,CAAC;IAED;IACA,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,IAAI,CAACV,UAAU,CAAC,CAAC,EAAE;QAAG;QACxB,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAG;QAClD,IAAI;UACF;UACA,MAAMQ,QAAO,GAAI,MAAMb,SAAS,CAACc,GAAG,CAAC,YAAY,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,QAAQ,EAAE,EAAE;YAC9EC,OAAO,EAAE;cACPC,aAAa,EAAE,UAAUhB,KAAK;YAChC;UACF,CAAC,CAAC;UAEF,MAAMc,QAAO,GAAIJ,QAAQ,CAACO,IAAI,CAACH,QAAQ,EAAG;UAC1C,IAAIA,QAAQ,EAAE;YACZ,IAAI,CAACT,OAAO,CAACC,IAAI,CAAC,YAAYQ,QAAQ,EAAE,CAAC;UAC3C,OAAO;YACLX,OAAO,CAACC,KAAK,CAAC,mDAAmD,CAAC;UACpE;QACF,EAAE,OAAOA,KAAK,EAAE;UACdD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnD,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAG;QAChC;MACF;IACF,CAAC;IAED;IACAY,aAAaA,CAAA,EAAG;MACd,IAAI,IAAI,CAACnB,UAAU,CAAC,CAAC,EAAE;QAAG;QACxB,IAAI,CAACoB,KAAK,CAAC,QAAQ,CAAC;MACtB;IACF,CAAC;IAED;IACAC,MAAMA,CAAA,EAAG;MACPnB,YAAY,CAACoB,UAAU,CAAC,WAAW,CAAC;MACpCpB,YAAY,CAACoB,UAAU,CAAC,UAAU,CAAC;MACnC,IAAI,CAAChB,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IAC7B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}