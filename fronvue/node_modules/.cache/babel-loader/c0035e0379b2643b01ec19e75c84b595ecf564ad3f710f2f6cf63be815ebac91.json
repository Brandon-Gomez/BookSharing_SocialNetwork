{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiClient from '@/services/ApiService';\nexport default {\n  data() {\n    return {\n      newPost: {\n        title: '',\n        description: ''\n      },\n      images: '',\n      pdf_file: '',\n      profileData: {\n        name: '',\n        birthdate: '',\n        gender: '',\n        description: ''\n      },\n      posts: [],\n      newComment: '',\n      profilePhoto: []\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.newPost.images = event.target.files[0]; // Asigna la imagen\n    },\n    onPdfChange(event) {\n      this.newPost.pdf_file = event.target.files[0]; // Asigna el PDF\n    },\n    async createPost() {\n      try {\n        const token = localStorage.getItem('authToken');\n\n        // Crear FormData y agregar los datos de la publicación\n        const formData = new FormData();\n        formData.append(\"title\", this.newPost.title);\n        formData.append(\"description\", this.newPost.description);\n        formData.append(\"images\", this.newPost.images);\n        formData.append(\"pdf\", this.newPost.pdf_file);\n\n        // Enviar la solicitud con FormData\n        const response = await apiClient.post('/posts', formData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n\n        // Actualizar la lista de publicaciones\n        console.log(response.data);\n        this.$router.push(`/profile/${this.profileData.username}`).then(() => {\n          window.location.reload();\n        });\n      } catch (error) {\n        console.error('Error creating post:', error);\n      }\n    }\n  },\n  mounted() {\n    this.profileData = JSON.parse(localStorage.getItem('profileData'));\n  }\n};","map":{"version":3,"names":["apiClient","data","newPost","title","description","images","pdf_file","profileData","name","birthdate","gender","posts","newComment","profilePhoto","methods","onFileChange","event","target","files","onPdfChange","createPost","token","localStorage","getItem","formData","FormData","append","response","post","headers","Authorization","console","log","$router","push","username","then","window","location","reload","error","mounted","JSON","parse"],"sources":["C:\\DATA\\POW\\BookSharing_SocialNetwork\\fronvue\\src\\components\\post_component.vue"],"sourcesContent":["<template>\r\n  <div class=\"container post-container my-4\">\r\n    <div class=\"container py-4\">\r\n      <h2 class=\"mb-4\">Nueva Publicación</h2>\r\n      <form @submit.prevent=\"createPost\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"title\" class=\"form-label\">Título:</label>\r\n          <input v-model=\"newPost.title\" type=\"text\" id=\"title\" class=\"form-control\"\r\n            placeholder=\"Ingrese el título de la publicación\" required />\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"description\" class=\"form-label\">Descripción:</label>\r\n          <textarea v-model=\"newPost.description\" id=\"description\" class=\"form-control\" rows=\"4\"\r\n            placeholder=\"Escriba la descripción aquí\" required></textarea>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"photo\" class=\"form-label\">Subir Foto:</label>\r\n          <input type=\"file\" id=\"photo\" class=\"form-control\" @change=\"onFileChange\" accept=\"image/*\" />\r\n        </div>\r\n        <div class=\"mb-4\">\r\n          <label for=\"book\" class=\"form-label\">Subir Libro (PDF):</label>\r\n          <input type=\"file\" id=\"book\" class=\"form-control\" @change=\"onPdfChange\" accept=\"application/pdf\" />\r\n        </div>\r\n        <button type=\"submit\" class=\"btn btn-primary w-100\">Publicar</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport apiClient from '@/services/ApiService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      newPost: {\r\n        title: '',\r\n        description: '',\r\n      },\r\n      images: '',\r\n      pdf_file: '',\r\n      profileData: {\r\n        name: '',\r\n        birthdate: '',\r\n        gender: '',\r\n        description: ''\r\n      },\r\n      posts: [],\r\n      newComment: '',\r\n      profilePhoto: [],\r\n    };\r\n  },\r\n  methods: {\r\n    onFileChange(event) {\r\n      this.newPost.images = event.target.files[0]; // Asigna la imagen\r\n    },\r\n    onPdfChange(event) {\r\n      this.newPost.pdf_file = event.target.files[0]; // Asigna el PDF\r\n    },\r\n    async createPost() {\r\n  try {\r\n    const token = localStorage.getItem('authToken');\r\n    \r\n    // Crear FormData y agregar los datos de la publicación\r\n    const formData = new FormData();\r\n    formData.append(\"title\", this.newPost.title);\r\n    formData.append(\"description\", this.newPost.description);\r\n    formData.append(\"images\", this.newPost.images);\r\n    formData.append(\"pdf\", this.newPost.pdf_file);\r\n\r\n    // Enviar la solicitud con FormData\r\n    const response = await apiClient.post('/posts', formData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n\r\n    // Actualizar la lista de publicaciones\r\n    console.log(response.data);\r\n    this.$router.push(`/profile/${this.profileData.username}`).then(() => {\r\n      window.location.reload();\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating post:', error);\r\n  }\r\n},\r\n  },\r\n  mounted() {\r\n    this.profileData = JSON.parse(localStorage.getItem('profileData'));\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.post {\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.post-container {\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  /* Blanco con 90% de opacidad */\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.card-title {\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.text-muted {\r\n  font-size: 0.9rem;\r\n  font-style: italic;\r\n}\r\n\r\n.img-fluid {\r\n  max-height: 300px;\r\n  /* Limitar la altura de la imagen si es muy grande */\r\n  object-fit: cover;\r\n}\r\n\r\n.container {\r\n  max-width: 600px;\r\n}\r\n\r\n.form-label {\r\n  font-weight: bold;\r\n}\r\n\r\n.btn {\r\n  font-size: 1.1em;\r\n  padding: 10px;\r\n}\r\n</style>"],"mappings":";AA+BA,OAAOA,SAAQ,MAAO,uBAAuB;AAE7C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE;MACf,CAAC;MACDC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE;QACXC,IAAI,EAAE,EAAE;QACRC,SAAS,EAAE,EAAE;QACbC,MAAM,EAAE,EAAE;QACVN,WAAW,EAAE;MACf,CAAC;MACDO,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAACC,KAAK,EAAE;MAClB,IAAI,CAACd,OAAO,CAACG,MAAK,GAAIW,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;IAC/C,CAAC;IACDC,WAAWA,CAACH,KAAK,EAAE;MACjB,IAAI,CAACd,OAAO,CAACI,QAAO,GAAIU,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;IACjD,CAAC;IACD,MAAME,UAAUA,CAAA,EAAG;MACrB,IAAI;QACF,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;;QAE/C;QACA,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACxB,OAAO,CAACC,KAAK,CAAC;QAC5CqB,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE,IAAI,CAACxB,OAAO,CAACE,WAAW,CAAC;QACxDoB,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACxB,OAAO,CAACG,MAAM,CAAC;QAC9CmB,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAE,IAAI,CAACxB,OAAO,CAACI,QAAQ,CAAC;;QAE7C;QACA,MAAMqB,QAAO,GAAI,MAAM3B,SAAS,CAAC4B,IAAI,CAAC,QAAQ,EAAEJ,QAAQ,EAAE;UACxDK,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUT,KAAK,EAAE;YAChC,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;;QAEF;QACAU,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC1B,IAAI,CAAC;QAC1B,IAAI,CAACgC,OAAO,CAACC,IAAI,CAAC,YAAY,IAAI,CAAC3B,WAAW,CAAC4B,QAAQ,EAAE,CAAC,CAACC,IAAI,CAAC,MAAM;UACpEC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;QAC1B,CAAC,CAAC;MACJ,EAAE,OAAOC,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;EACE,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAAClC,WAAU,GAAImC,IAAI,CAACC,KAAK,CAACrB,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;EACpE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}