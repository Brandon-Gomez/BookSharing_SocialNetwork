<template>
  <MainLayout>
    <div>
      <div class="page-title-overlap bg-dark pt-4">
        <div class="container d-lg-flex justify-content-between py-2 py-lg-3">
          <div class="order-lg-2 mb-3 mb-lg-0 pt-lg-2">
            <breadcrumb_component :items="[
              { label: 'Inicio', to: '/' },
              { label: 'Perfil' },
            ]" theme="breadcrumb-light" />
          </div>
          <div class="order-lg-1 pe-lg-4 text-center text-lg-start">
            <h1 class="h3 text-light mb-0">Información de perfil</h1>
          </div>
        </div>
      </div>
      <div class="container pb-5 mb-2 mb-md-4">
        <div class="row">
          <!-- Sidebar-->
          <aside class="col-lg-4 pt-4 pt-lg-0 pe-xl-5">
            <div class="bg-white rounded-3 shadow-lg pt-1 mb-5 mb-lg-0">
              <div class="d-md-flex justify-content-between align-items-center text-center text-md-start p-4">
                <div class="d-md-flex align-items-center">
                  <div class="img-thumbnail rounded-circle position-relative flex-shrink-0 mx-auto mb-2 mx-md-0 mb-md-0"
                    style="width: 6.375rem;">
                    <img class="rounded-circle" :src="getUserImage()" alt="Foto de perfil">
                  </div>
                  <div class="ps-md-3">
                    <h3 class="fs-base mb-0">{{ userData.name }}</h3>
                    <span class="text-accent fs-sm">{{ userData.email }}</span>
                  </div>
                </div>
                <a class="btn btn-primary d-lg-none mb-2 mt-3 mt-md-0" href="#account-menu" data-bs-toggle="collapse"
                  aria-expanded="false">
                  <i class="ci-menu me-2"></i>Menú
                </a>
              </div>
              <div class="d-lg-block collapse" id="account-menu">
                <div class="bg-secondary px-4 py-3">
                  <h3 class="fs-sm mb-0 text-muted">Panel</h3>
                </div>
                <ul class="list-unstyled mb-0">
                  <li class="border-bottom mb-0">
                    <a class="nav-link-style d-flex align-items-center px-4 py-3" href="#">
                      <i class="ci-book opacity-60 me-2"></i>
                      Publicaciones
                      <span class="fs-sm text-muted ms-auto">{{ publications }}</span>
                    </a>
                  </li>
                  <li class="border-bottom mb-0">
                    <a class="nav-link-style d-flex align-items-center px-4 py-3" href="#">
                      <i class="ci-heart opacity-60 me-2"></i>
                      Favoritos
                      <span class="fs-sm text-muted ms-auto">0</span>
                    </a>
                  </li>
                  <li class="mb-0">
                    <a class="nav-link-style d-flex align-items-center px-4 py-3" href="#">
                      <i class="ci-users opacity-60 me-2"></i>
                      Seguidores
                      <span class="fs-sm text-muted ms-auto">{{ follows.followers }}</span>
                    </a>
                  </li>
                  <li class="mb-0">
                    <a class="nav-link-style d-flex align-items-center px-4 py-3" href="#">
                      <i class="ci-user opacity-60 me-2"></i>
                      Siguiendo
                      <span class="fs-sm text-muted ms-auto">{{ follows.following }}</span>
                    </a>
                  </li>
                </ul>
                <div class="bg-secondary px-4 py-3">
                  <h3 class="fs-sm mb-0 text-muted">Configuración</h3>
                </div>
                <ul class="list-unstyled mb-0">
                  <li class="border-bottom mb-0">
                    <a class="nav-link-style d-flex align-items-center px-4 py-3 active" href="#">
                      <i class="ci-user opacity-60 me-2"></i>
                      Información personal
                    </a>
                  </li>
                  <li class="d-lg-none border-top mb-0">
                    <a class="nav-link-style d-flex align-items-center px-4 py-3" href="#" @click="logout">
                      <i class="ci-sign-out opacity-60 me-2"></i>
                      Cerrar sesión
                    </a>
                  </li>
                </ul>
              </div>
            </div>
          </aside>
          <!-- Content  -->
          <section class="col-lg-8">
            <!-- Toolbar-->
            <div class="d-none d-lg-flex justify-content-between align-items-center pt-lg-3 pb-4 pb-lg-5 mb-lg-3">
              <h6 class="fs-base text-light mb-0">Actualiza tus datos de perfil:</h6>
              <button class="btn btn-primary btn-sm" @click="logout">
                <i class="ci-sign-out me-2"></i>Cerrar sesión
              </button>
            </div>
            <!-- User form-->
            <form @submit.prevent="updateUser">
              <div class="bg-secondary rounded-3 p-4 mb-4">
                <div class="d-flex align-items-center">
                  <img class="rounded" :src="profilePhoto || getUserImage()" width="90" alt="Foto de perfil">
                  <div class="ps-3">

                    <input type="file" @change="handleFileUpload" class="form-control mt-2">
                    <div class="p mb-0 fs-ms text-muted">Sube una imagen JPG, GIF o PNG. 300 x 300 recomendado.</div>
                  </div>
                </div>
              </div>
              <div class="row gx-4 gy-3">
                <div class="col-sm-6">
                  <label class="form-label" for="account-name">Nombre</label>
                  <input class="form-control" type="text" id="account-name" v-model="userData.name" required>
                </div>
                <div class="col-sm-6">
                  <label class="form-label" for="account-username">Usuario</label>
                  <input class="form-control" type="text" id="account-username" v-model="userData.username" required>
                </div>
                <div class="col-sm-6">
                  <label class="form-label" for="account-email">Correo electrónico</label>
                  <input class="form-control" type="email" id="account-email" v-model="userData.email" disabled>
                </div>
                <div class="col-sm-6">
                  <label class="form-label" for="account-birthdate">Fecha de nacimiento</label>
                  <input class="form-control" type="date" id="account-birthdate" v-model="userData.birthdate">
                </div>
                <div class="col-12">
                  <label class="form-label" for="account-description">Descripción</label>
                  <textarea class="form-control" id="account-description" v-model="userData.description"
                    rows="3"></textarea>
                </div>
                <div class="col-12">
                  <hr class="mt-2 mb-3">
                  <div class="d-flex flex-wrap justify-content-between align-items-center">
                    <button class="btn btn-primary mt-3 mt-sm-0" type="submit">Actualizar perfil</button>
                  </div>
                </div>
              </div>
            </form>
          </section>
        </div>
      </div>
    </div>
  </MainLayout>
</template>

<script>
import apiClient from '@/services/ApiService';
import MainLayout from '@/layouts/MainLayout.vue';
import breadcrumb_component from './breadcrumb_component.vue';

export default {
  components: {
    MainLayout,
    breadcrumb_component,
  },
  data() {
    return {
      userData: {
        id: '',
        name: '',
        username: '',
        birthdate: '',
        description: '',
        user_picture: ''
      },
      isCurrentUser: null,
      publications: 0,
      follows: {
        isFollowing: false,
        followers: 0,
        following: 0,
      },
      profileImageFile: null,
      profilePhoto: null, // Para la vista previa
    };
  },
  computed: {
    formattedBirthdate() {
      if (this.userData.birthdate) {
        const date = new Date(this.userData.birthdate);
        return date.toLocaleDateString();
      }
      return '';
    },
  },
  watch: {
    '$route'() {
      this.getUser();
    }
  },
  methods: {
    getUserImage() {
      const defaultImageUrl = "https://firebasestorage.googleapis.com/v0/b/booksharing-socialnetwork.appspot.com/o/profile%2Fdefault.jpg?alt=media";
      return this.userData.user_picture
        ? this.userData.user_picture
        : defaultImageUrl;
    },
    async getUser() {
      const token = localStorage.getItem('authToken');
      if (token) {
        try {
          const response = await apiClient.get(`/profile/${this.$route.params.username}`, {
            headers: { Authorization: `Bearer ${token}` }
          });
          this.userData = response.data.user;
          if (this.userData.birthdate) {
            this.userData.birthdate = this.userData.birthdate.split('T')[0];
          }
          this.isCurrentUser = response.data.isCurrentUser;
          this.publications = response.data.publications;
          this.follows.followers = response.data.followers;
          this.follows.following = response.data.following;
          this.follows.isFollowing = response.data.isFollowing;
          if (this.isCurrentUser) {
            localStorage.setItem('userData', JSON.stringify(this.userData));
          }
        } catch (error) {
          console.error("Error fetching user:", error);
        }
      }
    },
    handleFileUpload(event) {
      const file = event.target.files[0];
      if (file) {
        this.profileImageFile = file;
        this.profilePhoto = URL.createObjectURL(file);
      }
    },
    async updateUser() {
      const token = localStorage.getItem('authToken');
      if (token) {
        try {
          // 1. Actualizar datos de perfil
          const response = await apiClient.put(`/profile/${this.userData.username}`, this.userData, {
            headers: {
              Authorization: `Bearer ${token}`
            }
          });
          this.userData = response.data.user;
          if (this.userData.birthdate) {
            this.userData.birthdate = this.userData.birthdate.split('T')[0];
          }

          // 2. Si hay imagen nueva, subirla
          if (this.profileImageFile) {
            const formData = new FormData();
            formData.append('photo', this.profileImageFile);
            const responsePhoto = await apiClient.post(`/upload/profile`, formData, {
              headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'multipart/form-data',
              }
            });
            // Actualiza la imagen en el perfil si el backend devuelve la URL
            if (responsePhoto.data && responsePhoto.data.photoUrl) {
              this.userData.user_picture = responsePhoto.data.photoUrl;
              this.profilePhoto = null; // Limpia la vista previa
              this.profileImageFile = null;
            }
          }

          await this.getUser();
          alert('Perfil actualizado correctamente');
        } catch (error) {
          console.error("Error updating user:", error);
        }
      }
    },
    logout() {
      localStorage.removeItem('authToken');
      this.$router.push('/login');
    }
  },
  beforeMount() {
    this.getUser();
  }
};
</script>
